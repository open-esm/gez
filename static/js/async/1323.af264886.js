"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([["1323"],{58800:function(e,n,a){a.r(n),a.d(n,{default:()=>s});var i=a(31549),r=a(6603);function o(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"renderowanie-po-stronie-klienta",children:["Renderowanie po stronie klienta",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#renderowanie-po-stronie-klienta",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Renderowanie po stronie klienta (Client-Side Rendering, CSR) to technika renderowania stron wykonywana po stronie przeglądarki. W Gez, gdy aplikacja nie może być wdrożona na instancji serwera Node.js, można wygenerować statyczny plik ",(0,i.jsx)(n.code,{children:"index.html"})," podczas etapu kompilacji, umożliwiając czyste renderowanie po stronie klienta."]}),"\n",(0,i.jsxs)(n.h2,{id:"scenariusze-użycia",children:["Scenariusze użycia",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#scenariusze-użycia",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Renderowanie po stronie klienta jest zalecane w następujących scenariuszach:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Środowiska statycznego hostingu"}),": takie jak GitHub Pages, CDN i inne usługi hostingu, kt\xf3re nie obsługują renderowania po stronie serwera"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proste aplikacje"}),": małe aplikacje, kt\xf3re nie wymagają szybkiego ładowania pierwszej strony ani wysokiego poziomu SEO"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Środowisko deweloperskie"}),": szybkie podglądanie i debugowanie aplikacji podczas fazy rozwoju"]}),"\n"]}),"\n",(0,i.jsxs)(n.h2,{id:"konfiguracja",children:["Konfiguracja",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#konfiguracja",children:"#"})]}),"\n",(0,i.jsxs)(n.h3,{id:"konfiguracja-szablonu-html",children:["Konfiguracja szablonu HTML",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#konfiguracja-szablonu-html",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"W trybie renderowania po stronie klienta należy skonfigurować uniwersalny szablon HTML. Ten szablon będzie służył jako kontener aplikacji, zawierający niezbędne odwołania do zasob\xf3w i punkt montowania."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.server.ts"',children:"import type { RenderContext } from '@gez/core';\n\nexport default async (rc: RenderContext) => {\n    // Zatwierdzenie zbierania zależności\n    await rc.commit();\n    \n    // Konfiguracja szablonu HTML\n    rc.html = `\n<!DOCTYPE html>\n<html>\n<head>\n    ${rc.preload()}           // Preładowanie zasob\xf3w\n    <title>Gez</title>\n    ${rc.css()}               // Wstrzyknięcie styl\xf3w\n</head>\n<body>\n    <div id=\"app\"></div>\n    ${rc.importmap()}         // Mapowanie import\xf3w\n    ${rc.moduleEntry()}       // Moduł wejściowy\n    ${rc.modulePreload()}     // Preładowanie moduł\xf3w\n</body>\n</html>\n`;\n};\n"})}),"\n",(0,i.jsxs)(n.h3,{id:"generowanie-statycznego-html",children:["Generowanie statycznego HTML",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#generowanie-statycznego-html",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["Aby użyć renderowania po stronie klienta w środowisku produkcyjnym, należy wygenerować statyczny plik HTML podczas etapu kompilacji. Gez dostarcza funkcję hooka ",(0,i.jsx)(n.code,{children:"postBuild"})," do realizacji tej funkcjonalności:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",meta:'title="src/entry.node.ts"',children:"import type { GezOptions } from '@gez/core';\n\nexport default {\n    async postBuild(gez) {\n        // Generowanie statycznego pliku HTML\n        const rc = await gez.render();\n        // Zapis pliku HTML\n        gez.writeSync(\n            gez.resolvePath('dist/client', 'index.html'),\n            rc.html\n        );\n    }\n} satisfies GezOptions;\n"})})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}let s=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["pl%2Fguide%2Fessentials%2Fcsr.md"]={toc:[{text:"Scenariusze użycia",id:"scenariusze-użycia",depth:2},{text:"Konfiguracja",id:"konfiguracja",depth:2},{text:"Konfiguracja szablonu HTML",id:"konfiguracja-szablonu-html",depth:3},{text:"Generowanie statycznego HTML",id:"generowanie-statycznego-html",depth:3}],title:"Renderowanie po stronie klienta",headingTitle:"Renderowanie po stronie klienta",frontmatter:{titleSuffix:"Przewodnik implementacji renderowania po stronie klienta w frameworku Gez",description:"Szczeg\xf3łowy opis mechanizmu renderowania po stronie klienta w frameworku Gez, w tym statyczna kompilacja, strategie wdrażania i najlepsze praktyki, pomagające programistom w osiągnięciu wydajnego renderowania frontendu w środowisku bezserwerowym.",head:[["meta",{property:"keywords",content:"Gez, renderowanie po stronie klienta, CSR, statyczna kompilacja, renderowanie frontendu, wdrażanie bezserwerowe, optymalizacja wydajności"}]]}}}}]);