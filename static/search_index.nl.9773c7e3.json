[{"id":200,"title":"@gez/rspack-vue","content":"#\n\nHet Rspack Vue-pakket biedt een set API's voor het maken en configureren van\nRspack-toepassingen op basis van het Vue-framework, met ondersteuning voor\nVue-componentontwikkeling, bouwen en server-side rendering.\n\n\nInstallatie#\n\nInstalleer @gez/rspack-vue als ontwikkelingsafhankelijkheid met behulp van een\npakketbeheerder:\n\n\nType-exporten#\n\n\nBuildTarget#\n\n\n\nHet type bouwdoelomgeving definieert de doelomgeving van de toepassing, gebruikt\nvoor het configureren van specifieke optimalisaties en functies tijdens het\nbouwproces:\n\n * node: Bouwt code die wordt uitgevoerd in een Node.js-omgeving\n * client: Bouwt code die wordt uitgevoerd in een browseromgeving\n * server: Bouwt code die wordt uitgevoerd in een serveromgeving\n\n\nRspackAppConfigContext#\n\n\n\nDe Rspack-toepassingsconfiguratiecontextinterface biedt contextinformatie die\ntoegankelijk is in configuratiehookfuncties:\n\n * gez: Gez-frameworkinstantie\n * buildTarget: Huidig bouwdoel (client/server/node)\n * config: Rspack-configuratieobject\n * options: Toepassingsconfiguratieopties\n\n\nRspackAppOptions#\n\n\n\nDe Rspack-toepassingsconfiguratieoptiesinterface:\n\n * css: CSS-uitvoermethode, optioneel 'css' (afzonderlijk bestand) of 'js'\n   (ingebouwd in JS), standaard automatisch geselecteerd op basis van de\n   omgeving: productieomgeving gebruikt 'css' voor cache- en parallelle\n   laadoptimalisatie, ontwikkelomgeving gebruikt 'js' voor ondersteuning van hot\n   module replacement (HMR)\n * loaders: Aangepaste loader-configuratie\n * styleLoader: style-loader-configuratieopties\n * cssLoader: css-loader-configuratieopties\n * target: Bouwdoelcompatibiliteitsconfiguratie\n * definePlugin: Globale constante definities\n * config: Configuratiehookfunctie\n\n\nRspackHtmlAppOptions#\n\nErft over van RspackAppOptions, gebruikt voor het configureren van specifieke\nopties voor HTML-toepassingen.\n\n\nFunctie-exporten#\n\n\ncreateRspackApp#\n\n\n\nMaakt een standaard Rspack-toepassingsinstantie.\n\nParameters:\n\n * gez: Gez-frameworkinstantie\n * options: Rspack-toepassingsconfiguratieopties\n\nRetourwaarde:\n\n * Retourneert een Promise die wordt opgelost naar de gemaakte\n   toepassingsinstantie\n\n\ncreateRspackHtmlApp#\n\n\n\nMaakt een HTML-type Rspack-toepassingsinstantie.\n\nParameters:\n\n * gez: Gez-frameworkinstantie\n * options: HTML-toepassingsconfiguratieopties\n\nRetourwaarde:\n\n * Retourneert een Promise die wordt opgelost naar de gemaakte\n   HTML-toepassingsinstantie\n\n\nConstante-exporten#\n\n\nRSPACK_LOADER#\n\n\n\nDe Rspack ingebouwde loader-identificatietoewijzingsobject, biedt veelgebruikte\nloader-naamconstanten:\n\n * builtinSwcLoader: Rspack ingebouwde SWC-loader, gebruikt voor het verwerken\n   van TypeScript/JavaScript-bestanden\n * lightningcssLoader: Rspack ingebouwde lightningcss-loader, gebruikt voor het\n   verwerken van CSS-bestanden met een hoogwaardige compiler\n * styleLoader: Loader voor het injecteren van CSS in de DOM\n * cssLoader: Loader voor het parseren van CSS-bestanden en het verwerken van\n   CSS-modularisatie\n * lessLoader: Loader voor het compileren van Less-bestanden naar CSS\n * styleResourcesLoader: Loader voor het automatisch importeren van globale\n   stijlresources (zoals variabelen, mixins)\n * workerRspackLoader: Loader voor het verwerken van Web Worker-bestanden\n\nHet gebruik van deze constanten maakt het mogelijk om in configuraties naar\ningebouwde loaders te verwijzen, waardoor handmatige invoer van strings wordt\nvermeden:\n\n\n\nBelangrijke opmerkingen:\n\n * Deze loaders zijn al ingebouwd in Rspack en hoeven niet apart te worden\n   geïnstalleerd\n * Bij het configureren van aangepaste loaders kunnen deze constanten worden\n   gebruikt om de standaard loader-implementatie te vervangen\n * Sommige loaders (zoals builtinSwcLoader) hebben specifieke\n   configuratieopties, raadpleeg de bijbehorende configuratiedocumentatie\n\n\nModule-exporten#\n\n\nrspack#\n\nHernoemt en exporteert alle inhoud van het @rspack/core-pakket, biedt volledige\nRspack-kernfunctionaliteit.","routePath":"/nl/api/app/rspack-vue","lang":"nl","toc":[{"text":"Installatie","id":"installatie","depth":2,"charIndex":216},{"text":"Type-exporten","id":"type-exporten","depth":2,"charIndex":328},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":345},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":729},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":1045},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":1712},{"text":"Functie-exporten","id":"functie-exporten","depth":2,"charIndex":1846},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":1866},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":2134},{"text":"Constante-exporten","id":"constante-exporten","depth":2,"charIndex":2409},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":2431},{"text":"Module-exporten","id":"module-exporten","depth":2,"charIndex":3800},{"text":"rspack","id":"rspack","depth":3,"charIndex":3819}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue Bouwhulpmiddel","description":"Het Vue-specifieke bouwhulpmiddel van het Gez-framework biedt volledige ondersteuning voor het bouwen van Vue 2/3-toepassingen, inclusief componentontwikkeling, SSR-rendering en prestatieoptimalisatie.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, Vue, Vue2, Vue3, SSR, bouwhulpmiddel, componentontwikkeling, server-side rendering, prestatieoptimalisatie"}]]},"version":""},{"id":201,"title":"@gez/rspack","content":"#\n\nHet Rspack-pakket biedt een set API's voor het maken en configureren van\nRspack-applicaties, en ondersteunt de bouw en ontwikkeling van\nstandaardapplicaties en HTML-applicaties.\n\n\nInstallatie#\n\nInstalleer @gez/rspack als ontwikkelingsafhankelijkheid met behulp van een\npakketbeheerder:\n\n\nType-exporten#\n\n\nBuildTarget#\n\n\n\nHet type bouwdoelomgeving, dat de doelomgeving van de applicatie definieert,\ngebruikt voor het configureren van specifieke optimalisaties en functies tijdens\nhet bouwproces:\n\n * node: Bouwt code die wordt uitgevoerd in een Node.js-omgeving\n * client: Bouwt code die wordt uitgevoerd in een browseromgeving\n * server: Bouwt code die wordt uitgevoerd in een serveromgeving\n\n\nRspackAppConfigContext#\n\n\n\nDe Rspack-applicatieconfiguratiecontextinterface, die contextinformatie biedt\ndie toegankelijk is in configuratiehookfuncties:\n\n * gez: Gez framework-instantie\n * buildTarget: Het huidige bouwdoel (client/server/node)\n * config: Rspack-configuratieobject\n * options: Applicatieconfiguratieopties\n\n\nRspackAppOptions#\n\n\n\nDe Rspack-applicatieconfiguratieoptiesinterface:\n\n * css: CSS-uitvoermethode, optioneel 'css' (afzonderlijk bestand) of 'js'\n   (ingebouwd in JS), standaard automatisch geselecteerd op basis van de\n   omgeving: productieomgeving gebruikt 'css' voor cache- en parallelle\n   laadoptimalisatie, ontwikkelomgeving gebruikt 'js' voor ondersteuning van hot\n   module replacement (HMR)\n * loaders: Aangepaste loader-configuratie\n * styleLoader: style-loader-configuratieopties\n * cssLoader: css-loader-configuratieopties\n * target: Bouwdoelcompatibiliteitsconfiguratie\n * definePlugin: Globale constante definities\n * config: Configuratiehookfunctie\n\n\nRspackHtmlAppOptions#\n\nErft over van RspackAppOptions, gebruikt voor het configureren van specifieke\nopties voor HTML-applicaties.\n\n\nFunctie-exporten#\n\n\ncreateRspackApp#\n\n\n\nMaakt een standaard Rspack-applicatie-instantie.\n\nParameters:\n\n * gez: Gez framework-instantie\n * options: Rspack-applicatieconfiguratieopties\n\nRetourwaarde:\n\n * Retourneert een Promise die wordt opgelost naar de gemaakte\n   applicatie-instantie\n\n\ncreateRspackHtmlApp#\n\n\n\nMaakt een HTML-type Rspack-applicatie-instantie.\n\nParameters:\n\n * gez: Gez framework-instantie\n * options: HTML-applicatieconfiguratieopties\n\nRetourwaarde:\n\n * Retourneert een Promise die wordt opgelost naar de gemaakte\n   HTML-applicatie-instantie\n\n\nConstante-exporten#\n\n\nRSPACK_LOADER#\n\n\n\nDe ingebouwde loader-identificatietoewijzingsobject van Rspack, biedt\nveelgebruikte loader-naamconstanten:\n\n * builtinSwcLoader: De ingebouwde SWC-loader van Rspack, gebruikt voor het\n   verwerken van TypeScript/JavaScript-bestanden\n * lightningcssLoader: De ingebouwde lightningcss-loader van Rspack, gebruikt\n   voor het verwerken van CSS-bestanden met een hoogwaardige compiler\n * styleLoader: Loader voor het injecteren van CSS in de DOM\n * cssLoader: Loader voor het parseren van CSS-bestanden en het verwerken van\n   CSS-modularisatie\n * lessLoader: Loader voor het compileren van Less-bestanden naar CSS\n * styleResourcesLoader: Loader voor het automatisch importeren van globale\n   stijlresources (zoals variabelen, mixins)\n * workerRspackLoader: Loader voor het verwerken van Web Worker-bestanden\n\nHet gebruik van deze constanten maakt het mogelijk om in configuraties naar\ningebouwde loaders te verwijzen, waardoor handmatige invoer van strings wordt\nvermeden:\n\n\n\nBelangrijke opmerkingen:\n\n * Deze loaders zijn al ingebouwd in Rspack en hoeven niet apart te worden\n   geïnstalleerd\n * Bij het configureren van aangepaste loaders kunnen deze constanten worden\n   gebruikt om de standaard loader-implementatie te vervangen\n * Sommige loaders (zoals builtinSwcLoader) hebben specifieke\n   configuratieopties, raadpleeg de bijbehorende configuratiedocumentatie\n\n\nModule-exporten#\n\n\nrspack#\n\nHernoemt en exporteert alle inhoud van het @rspack/core-pakket, biedt volledige\nRspack-kernfunctionaliteit.","routePath":"/nl/api/app/rspack","lang":"nl","toc":[{"text":"Installatie","id":"installatie","depth":2,"charIndex":182},{"text":"Type-exporten","id":"type-exporten","depth":2,"charIndex":290},{"text":"BuildTarget","id":"buildtarget","depth":3,"charIndex":307},{"text":"RspackAppConfigContext","id":"rspackappconfigcontext","depth":3,"charIndex":696},{"text":"RspackAppOptions","id":"rspackappoptions","depth":3,"charIndex":1021},{"text":"RspackHtmlAppOptions","id":"rspackhtmlappoptions","depth":3,"charIndex":1687},{"text":"Functie-exporten","id":"functie-exporten","depth":2,"charIndex":1820},{"text":"createRspackApp","id":"createrspackapp","depth":3,"charIndex":1840},{"text":"createRspackHtmlApp","id":"createrspackhtmlapp","depth":3,"charIndex":2108},{"text":"Constante-exporten","id":"constante-exporten","depth":2,"charIndex":2383},{"text":"RSPACK_LOADER","id":"rspack_loader","depth":3,"charIndex":2405},{"text":"Module-exporten","id":"module-exporten","depth":2,"charIndex":3792},{"text":"rspack","id":"rspack","depth":3,"charIndex":3811}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Rspack Bouwhulpmiddel","description":"Het Rspack bouwhulpmiddel van het Gez framework biedt hoogwaardige applicatiebouwcapaciteiten, ondersteunt de ontwikkeling en bouw van standaardapplicaties en HTML-applicaties, en bevat ingebouwde resourceverwerkers en optimalisatieconfiguraties.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, bouwhulpmiddel, applicatiebouw, HTML-applicatie, TypeScript, CSS, resourceverwerking, prestatieoptimalisatie"}]]},"version":""},{"id":202,"title":"App","content":"#\n\nApp is de applicatie abstractie van het Gez-framework, dat een uniforme\ninterface biedt voor het beheren van de levenscyclus van de applicatie,\nstatische bronnen en server-side rendering.\n\n\n\n\nType Definitie#\n\n\nApp#\n\n\n\nmiddleware#\n\n * Type: Middleware\n\nMiddleware voor het behandelen van statische bronnen.\n\nOntwikkelomgeving:\n\n * Behandelt verzoeken voor statische bronnen van de broncode\n * Ondersteunt real-time compilatie en hot reload\n * Gebruikt no-cache caching strategie\n\nProductieomgeving:\n\n * Behandelt gebouwde statische bronnen\n * Ondersteunt langdurige caching van onveranderlijke bestanden (.final.xxx)\n * Geoptimaliseerde bron laadstrategie\n\n\n\nrender#\n\n * Type: (options?: RenderContextOptions) => Promise\n\nServer-side rendering functie. Biedt verschillende implementaties afhankelijk\nvan de omgeving:\n\n * Productieomgeving (start): Laadt het gebouwde server-side ingangsbestand\n   (entry.server) en voert rendering uit\n * Ontwikkelomgeving (dev): Laadt het server-side ingangsbestand uit de broncode\n   en voert rendering uit\n\n\n\nbuild#\n\n * Type: () => Promise\n\nProductieomgeving bouwfunctie. Gebruikt voor het bundelen en optimaliseren van\nbronnen. Retourneert true bij succesvolle bouw, false bij falen.\n\ndestroy#\n\n * Type: () => Promise\n\nBronnen opruimfunctie. Gebruikt voor het afsluiten van de server, verbreken van\nverbindingen, etc. Retourneert true bij succesvolle opruiming, false bij falen.","routePath":"/nl/api/core/app","lang":"nl","toc":[{"text":"Type Definitie","id":"type-definitie","depth":2,"charIndex":194},{"text":"App","id":"app-1","depth":3,"charIndex":-1},{"text":"middleware","id":"middleware","depth":4,"charIndex":220},{"text":"render","id":"render","depth":4,"charIndex":660},{"text":"build","id":"build","depth":4,"charIndex":1046},{"text":"destroy","id":"destroy","depth":4,"charIndex":1223}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Applicatie Abstractie Interface","description":"Gedetailleerde uitleg over de App-interface van het Gez-framework, inclusief applicatie levenscyclusbeheer, statische bronbehandeling en server-side rendering functionaliteiten, om ontwikkelaars te helpen de kernfunctionaliteiten van de applicatie te begrijpen en te gebruiken.","head":[["meta",{"property":"keywords","content":"Gez, App, Applicatie Abstractie, Levenscyclus, Statische Bronnen, Server-side Rendering, API"}]]},"version":""},{"id":203,"title":"Gez","content":"#\n\n\nIntroductie#\n\nGez is een high-performance webapplicatieframework gebaseerd op Rspack, dat\nvolledig levenscyclusbeheer, statische resourceverwerking en server-side\nrendering mogelijkheden biedt.\n\n\nType Definities#\n\n\nRuntimeTarget#\n\n * Type definitie:\n\n\n\nApplicatie runtime omgeving type:\n\n * client: Draait in de browseromgeving, ondersteunt DOM-operaties en browser\n   API's\n * server: Draait in de Node.js omgeving, ondersteunt bestandssysteem en\n   server-side functionaliteiten\n\n\nImportMap#\n\n * Type definitie:\n\n\n\nES module import mapping type.\n\nSpecifierMap#\n\n * Type definitie:\n\n\n\nModule identifier mapping type, gebruikt om module import paden te mappen.\n\nScopesMap#\n\n * Type definitie:\n\n\n\nScope mapping type, gebruikt om module import mappings binnen specifieke scopes\nte definiëren.\n\n\nCOMMAND#\n\n * Type definitie:\n\n\n\nCommando type enumeratie:\n\n * dev: Ontwikkelomgeving commando, start de ontwikkelserver met hot reload\n * build: Build commando, genereert productie build artifacts\n * preview: Preview commando, start een lokale preview server\n * start: Start commando, draait de productieserver\n\n\nInstantie Opties#\n\nDefinieert de core configuratieopties van het Gez framework.\n\n\n\nroot#\n\n * Type: string\n * Standaardwaarde: process.cwd()\n\nProject root directory pad. Kan een absoluut of relatief pad zijn, relatieve\npaden worden opgelost ten opzichte van de huidige werkdirectory.\n\nisProd#\n\n * Type: boolean\n * Standaardwaarde: process.env.NODE_ENV === 'production'\n\nOmgevingsindicator.\n\n * true: Productieomgeving\n * false: Ontwikkelomgeving\n\nbasePathPlaceholder#\n\n * Type: string | false\n * Standaardwaarde: '[[[___GEZ_DYNAMIC_BASE___]]]'\n\nBasis pad placeholder configuratie. Gebruikt voor runtime dynamische vervanging\nvan resource basis paden. Stel in op false om deze functionaliteit uit te\nschakelen.\n\nmodules#\n\n * Type: ModuleConfig\n\nModule configuratieopties. Gebruikt om module resolutie regels te configureren,\ninclusief module aliassen en externe afhankelijkheden.\n\npacks#\n\n * Type: PackConfig\n\nBuild configuratieopties. Gebruikt om build artifacts te verpakken in standaard\nnpm .tgz format pakketten.\n\ndevApp#\n\n * Type: (gez: Gez) => Promise\n\nOntwikkelomgeving applicatie creatie functie. Alleen gebruikt in de\nontwikkelomgeving, om een applicatie-instantie voor de ontwikkelserver te\ncreëren.\n\n\n\nserver#\n\n * Type: (gez: Gez) => Promise\n\nServer start configuratie functie. Gebruikt om de HTTP server te configureren en\nte starten, zowel in ontwikkel- als productieomgevingen.\n\n\n\npostBuild#\n\n * Type: (gez: Gez) => Promise\n\nPost-build verwerkingsfunctie. Uitgevoerd na het bouwen van het project, kan\ngebruikt worden voor:\n\n * Extra resourceverwerking\n * Deployment operaties\n * Genereren van statische bestanden\n * Verzenden van build notificaties\n\n\nInstantie Eigenschappen#\n\n\nname#\n\n * Type: string\n * Alleen-lezen: true\n\nDe naam van de huidige module, afkomstig uit de moduleconfiguratie.\n\n\nvarName#\n\n * Type: string\n * Alleen-lezen: true\n\nEen geldige JavaScript variabelenaam gegenereerd op basis van de modulenaam.\n\n\nroot#\n\n * Type: string\n * Alleen-lezen: true\n\nAbsoluut pad van de project root directory. Als het geconfigureerde root een\nrelatief pad is, wordt het opgelost ten opzichte van de huidige werkdirectory.\n\n\nisProd#\n\n * Type: boolean\n * Alleen-lezen: true\n\nBepaalt of de huidige omgeving een productieomgeving is. Prioriteit wordt\ngegeven aan de isProd configuratieoptie, indien niet geconfigureerd wordt\nprocess.env.NODE_ENV gebruikt.\n\n\nbasePath#\n\n * Type: string\n * Alleen-lezen: true\n * Gooit: NotReadyError - Wanneer het framework niet geïnitialiseerd is\n\nHaalt het module basis pad op dat begint en eindigt met een slash. Retourneert\nhet formaat /${name}/, waarbij name afkomstig is uit de moduleconfiguratie.\n\n\nbasePathPlaceholder#\n\n * Type: string\n * Alleen-lezen: true\n\nHaalt de basis pad placeholder op die gebruikt wordt voor runtime dynamische\nvervanging. Kan worden uitgeschakeld via configuratie.\n\n\nmiddleware#\n\n * Type: Middleware\n * Alleen-lezen: true\n\nHaalt de statische resourceverwerkings middleware op. Biedt verschillende\nimplementaties afhankelijk van de omgeving:\n\n * Ontwikkelomgeving: Ondersteunt real-time compilatie en hot reload\n * Productieomgeving: Ondersteunt langdurige caching van statische resources\n\n\n\n\nrender#\n\n * Type: (options?: RenderContextOptions) => Promise\n * Alleen-lezen: true\n\nHaalt de server-side rendering functie op. Biedt verschillende implementaties\nafhankelijk van de omgeving:\n\n * Ontwikkelomgeving: Ondersteunt hot reload en real-time preview\n * Productieomgeving: Biedt geoptimaliseerde rendering prestaties\n\n\n\n\nCOMMAND#\n\n * Type: typeof COMMAND\n * Alleen-lezen: true\n\nHaalt de commando enumeratie type definitie op.\n\n\nmoduleConfig#\n\n * Type: ParsedModuleConfig\n * Alleen-lezen: true\n * Gooit: NotReadyError - Wanneer het framework niet geïnitialiseerd is\n\nHaalt de volledige configuratie-informatie van de huidige module op, inclusief\nmodule resolutie regels en alias configuraties.\n\n\npackConfig#\n\n * Type: ParsedPackConfig\n * Alleen-lezen: true\n * Gooit: NotReadyError - Wanneer het framework niet geïnitialiseerd is\n\nHaalt de build gerelateerde configuratie van de huidige module op, inclusief\noutput paden en package.json verwerking.\n\n\nInstantie Methoden#\n\n\nconstructor()#\n\n * Parameters:\n   * options?: GezOptions - Framework configuratieopties\n * Retourwaarde: Gez\n\nCreëert een Gez framework instantie.\n\n\n\n\ninit()#\n\n * Parameters: command: COMMAND\n * Retourwaarde: Promise\n * Gooit:\n   * Error: Bij herhaalde initialisatie\n   * NotReadyError: Bij toegang tot een niet-geïnitialiseerde instantie\n\nInitialiseert de Gez framework instantie. Voert de volgende core initialisatie\nstappen uit:\n\n 1. Parseert projectconfiguratie (package.json, moduleconfiguratie, build\n    configuratie, etc.)\n 2. Creëert applicatie-instantie (ontwikkel- of productieomgeving)\n 3. Voert de bijbehorende levenscyclusmethoden uit op basis van het commando\n\nLet op\n * Herhaalde initialisatie zal een fout veroorzaken\n * Toegang tot een niet-geïnitialiseerde instantie zal een NotReadyError\n   veroorzaken\n\n\n\n\ndestroy()#\n\n * Retourwaarde: Promise\n\nVernietigt de Gez framework instantie, voert resource opschoning en verbinding\nsluiting uit. Voornamelijk gebruikt voor:\n\n * Sluiten van de ontwikkelserver\n * Opschonen van tijdelijke bestanden en caches\n * Vrijgeven van systeembronnen\n\n\n\n\nbuild()#\n\n * Retourwaarde: Promise\n\nVoert de applicatie build procedure uit, inclusief:\n\n * Compileren van broncode\n * Genereren van productie build artifacts\n * Optimaliseren en comprimeren van code\n * Genereren van resource manifesten\n\nLet op\n\nAanroepen zonder geïnitialiseerde framework instantie zal een NotReadyError\nveroorzaken\n\n\n\n\nserver()#\n\n * Retourwaarde: Promise\n * Gooit: NotReadyError - Wanneer het framework niet geïnitialiseerd is\n\nStart de HTTP server en configureert de serverinstantie. Wordt aangeroepen in de\nvolgende levenscycli:\n\n * Ontwikkelomgeving (dev): Start de ontwikkelserver met hot reload\n * Productieomgeving (start): Start de productieserver met productieprestaties\n\n\n\n\npostBuild()#\n\n * Retourwaarde: Promise\n\nVoert post-build verwerkingslogica uit, gebruikt voor:\n\n * Genereren van statische HTML bestanden\n * Verwerken van build artifacts\n * Uitvoeren van deployment taken\n * Verzenden van build notificaties\n\n\n\n\nresolvePath#\n\nResolve project paden, converteert relatieve paden naar absolute paden.\n\n * Parameters:\n   \n   * projectPath: ProjectPath - Project pad type\n   * ...args: string[] - Pad fragmenten\n\n * Retourwaarde: string - Het opgeloste absolute pad\n\n * Voorbeeld:\n\n\n\n\nwriteSync()#\n\nSchrijft bestandsinhoud synchroon.\n\n * Parameters:\n   \n   * filepath: string - Absoluut pad van het bestand\n   * data: any - Te schrijven data, kan een string, Buffer of object zijn\n\n * Retourwaarde: boolean - Of het schrijven succesvol was\n\n * Voorbeeld:\n\n\n\n\nreadJsonSync()#\n\nLeest en parseert een JSON bestand synchroon.\n\n * Parameters:\n   \n   * filename: string - Absoluut pad van het JSON bestand\n\n * Retourwaarde: any - Het geparseerde JSON object\n\n * Excepties: Gooit een exceptie als het bestand niet bestaat of het JSON\n   formaat ongeldig is\n\n * Voorbeeld:\n\n\n\n\nreadJson()#\n\nLeest en parseert een JSON bestand asynchroon.\n\n * Parameters:\n   \n   * filename: string - Absoluut pad van het JSON bestand\n\n * Retourwaarde: Promise - Het geparseerde JSON object\n\n * Excepties: Gooit een exceptie als het bestand niet bestaat of het JSON\n   formaat ongeldig is\n\n * Voorbeeld:\n\n\n\n\ngetManifestList()#\n\nHaalt de build manifest lijst op.\n\n * Parameters:\n   \n   * target: RuntimeTarget - Doelomgeving type\n     * 'client': Clientomgeving\n     * 'server': Serveromgeving\n\n * Retourwaarde: Promise - Een alleen-lezen lijst van build manifesten\n\n * Excepties: Gooit een NotReadyError als de framework instantie niet\n   geïnitialiseerd is\n\nDeze methode wordt gebruikt om de build manifest lijst voor de gespecificeerde\ndoelomgeving op te halen, met de volgende functionaliteiten:\n\n 1. Cachebeheer\n    \n    * Gebruikt interne cache mechanismen om herhaald laden te voorkomen\n    * Retourneert onveranderlijke manifest lijsten\n\n 2. Omgevingsaanpassing\n    \n    * Ondersteunt zowel client- als serveromgevingen\n    * Retourneert de bijbehorende manifest informatie op basis van de\n      doelomgeving\n\n 3. Module mapping\n    \n    * Bevat module export informatie\n    * Registreert resource afhankelijkheden\n\n * Voorbeeld:\n\n\n\n\ngetImportMap()#\n\nHaalt het import mapping object op.\n\n * Parameters:\n   * target: RuntimeTarget - Doelomgeving type\n     * 'client': Genereert browseromgeving import mapping\n     * `'server'","routePath":"/nl/api/core/gez","lang":"nl","toc":[{"text":"Introductie","id":"introductie","depth":2,"charIndex":3},{"text":"Type Definities","id":"type-definities","depth":2,"charIndex":199},{"text":"RuntimeTarget","id":"runtimetarget","depth":3,"charIndex":218},{"text":"ImportMap","id":"importmap","depth":3,"charIndex":486},{"text":"SpecifierMap","id":"specifiermap","depth":4,"charIndex":552},{"text":"ScopesMap","id":"scopesmap","depth":4,"charIndex":665},{"text":"COMMAND","id":"command","depth":3,"charIndex":796},{"text":"Instantie Opties","id":"instantie-opties","depth":2,"charIndex":1109},{"text":"root","id":"root","depth":4,"charIndex":1192},{"text":"isProd","id":"isprod","depth":4,"charIndex":1393},{"text":"basePathPlaceholder","id":"basepathplaceholder","depth":4,"charIndex":1555},{"text":"modules","id":"modules","depth":4,"charIndex":1819},{"text":"packs","id":"packs","depth":4,"charIndex":1988},{"text":"devApp","id":"devapp","depth":4,"charIndex":2125},{"text":"server","id":"server","depth":4,"charIndex":2320},{"text":"postBuild","id":"postbuild","depth":4,"charIndex":2502},{"text":"Instantie Eigenschappen","id":"instantie-eigenschappen","depth":2,"charIndex":2773},{"text":"name","id":"name","depth":3,"charIndex":2800},{"text":"varName","id":"varname","depth":3,"charIndex":2916},{"text":"root","id":"root-1","depth":3,"charIndex":3044},{"text":"isProd","id":"isprod-1","depth":3,"charIndex":3248},{"text":"basePath","id":"basepath","depth":3,"charIndex":3478},{"text":"basePathPlaceholder","id":"basepathplaceholder-1","depth":3,"charIndex":3757},{"text":"middleware","id":"middleware","depth":3,"charIndex":3952},{"text":"render","id":"render","depth":3,"charIndex":4277},{"text":"COMMAND","id":"command-1","depth":3,"charIndex":4606},{"text":"moduleConfig","id":"moduleconfig","depth":3,"charIndex":4713},{"text":"packConfig","id":"packconfig","depth":3,"charIndex":4980},{"text":"Instantie Methoden","id":"instantie-methoden","depth":2,"charIndex":5234},{"text":"constructor()","id":"constructor","depth":3,"charIndex":5256},{"text":"init()","id":"init","depth":3,"charIndex":5407},{"text":"destroy()","id":"destroy","depth":3,"charIndex":6083},{"text":"build()","id":"build","depth":3,"charIndex":6361},{"text":"server()","id":"server-1","depth":3,"charIndex":-1},{"text":"postBuild()","id":"postbuild-1","depth":3,"charIndex":-1},{"text":"resolvePath","id":"resolvepath","depth":3,"charIndex":7308},{"text":"writeSync()","id":"writesync","depth":3,"charIndex":7576},{"text":"readJsonSync()","id":"readjsonsync","depth":3,"charIndex":7850},{"text":"readJson()","id":"readjson","depth":3,"charIndex":8160},{"text":"getManifestList()","id":"getmanifestlist","depth":3,"charIndex":8471},{"text":"getImportMap()","id":"getimportmap","depth":3,"charIndex":9404}],"domain":"","frontmatter":{"titleSuffix":"Framework Core Class API Referentie","description":"Gedetailleerde uitleg over de core class API van het Gez framework, inclusief applicatie levenscyclusbeheer, statische resourceverwerking en server-side rendering mogelijkheden, om ontwikkelaars te helpen de kernfunctionaliteiten van het framework beter te begrijpen.","head":[["meta",{"property":"keywords","content":"Gez, API, Levenscyclusbeheer, Statische resources, Server-side rendering, Rspack, Web applicatieframework"}]]},"version":""},{"id":204,"title":"ManifestJson","content":"#\n\nmanifest.json is een manifestbestand dat door het Gez-framework wordt\ngegenereerd tijdens het bouwproces. Het wordt gebruikt om informatie over de\nbouwproducten van de service vast te leggen. Het biedt een uniforme interface\nvoor het beheren van bouwproducten, exportbestanden en bronstatistieken.\n\n\n\n\nType Definitie#\n\n\nManifestJson#\n\n\n\nname#\n\n * Type: string\n\nDe servicenaam, afkomstig van de GezOptions.name configuratie.\n\nexports#\n\n * Type: Record\n\nDe mapping van exportbestanden, waarbij de key het pad van het bronbestand is en\nde value het pad van het gebouwde bestand.\n\nbuildFiles#\n\n * Type: string[]\n\nDe volledige lijst van bouwproducten, inclusief alle gegenereerde bestandspaden.\n\nchunks#\n\n * Type: Record\n\nDe relatie tussen bronbestanden en gecompileerde producten, waarbij de key het\npad van het bronbestand is en de value de compilatie-informatie.\n\n\nManifestJsonChunks#\n\n\n\njs#\n\n * Type: string\n\nHet pad van het gecompileerde JS-bestand voor het huidige bronbestand.\n\ncss#\n\n * Type: string[]\n\nDe lijst met CSS-bestandspaden die aan het huidige bronbestand zijn gekoppeld.\n\nresources#\n\n * Type: string[]\n\nDe lijst met andere bronbestandspaden die aan het huidige bronbestand zijn\ngekoppeld.\n\nsizes#\n\n * Type: ManifestJsonChunkSizes\n\nStatistieken over de grootte van de bouwproducten.\n\n\nManifestJsonChunkSizes#\n\n\n\njs#\n\n * Type: number\n\nDe grootte van het JS-bestand (in bytes).\n\ncss#\n\n * Type: number\n\nDe grootte van het CSS-bestand (in bytes).\n\nresource#\n\n * Type: number\n\nDe grootte van het bronbestand (in bytes).","routePath":"/nl/api/core/manifest-json","lang":"nl","toc":[{"text":"Type Definitie","id":"type-definitie","depth":2,"charIndex":304},{"text":"ManifestJson","id":"manifestjson-1","depth":3,"charIndex":-1},{"text":"name","id":"name","depth":4,"charIndex":339},{"text":"exports","id":"exports","depth":4,"charIndex":427},{"text":"buildFiles","id":"buildfiles","depth":4,"charIndex":579},{"text":"chunks","id":"chunks","depth":4,"charIndex":693},{"text":"ManifestJsonChunks","id":"manifestjsonchunks","depth":3,"charIndex":865},{"text":"js","id":"js","depth":4,"charIndex":888},{"text":"css","id":"css","depth":4,"charIndex":982},{"text":"resources","id":"resources","depth":4,"charIndex":1087},{"text":"sizes","id":"sizes","depth":4,"charIndex":1205},{"text":"ManifestJsonChunkSizes","id":"manifestjsonchunksizes","depth":3,"charIndex":1299},{"text":"js","id":"js-1","depth":4,"charIndex":1326},{"text":"css","id":"css-1","depth":4,"charIndex":1391},{"text":"resource","id":"resource","depth":4,"charIndex":1458}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Bouwmanifest Bestandsreferentie","description":"Gedetailleerde uitleg over de structuur van het bouwmanifestbestand (manifest.json) van het Gez-framework, inclusief beheer van bouwproducten, bestandsmapping en bronstatistieken, om ontwikkelaars te helpen het bouwsysteem te begrijpen en te gebruiken.","head":[["meta",{"property":"keywords","content":"Gez, ManifestJson, Bouwmanifest, Bronbeheer, Bouwproducten, Bestandsmapping, API"}]]},"version":""},{"id":205,"title":"ModuleConfig","content":"#\n\nModuleConfig biedt de moduleconfiguratiefunctionaliteit van het Gez framework,\ngebruikt om de import/export regels van modules, aliasconfiguratie en externe\nafhankelijkheden te definiëren.\n\n\nType Definitie#\n\n\nPathType#\n\n * Type Definitie:\n\n\n\nEnum voor modulepadtype:\n\n * npm: Geeft afhankelijkheden in node_modules aan\n * root: Geeft bestanden in de projectroot aan\n\n\nModuleConfig#\n\n * Type Definitie:\n\n\n\nModuleconfiguratie-interface, gebruikt om de export, import en externe\nafhankelijkheidsconfiguratie van een service te definiëren.\n\nexports#\n\nExportconfiguratielijst, die specifieke code-eenheden (zoals componenten,\nhulpfuncties, etc.) in de service naar buiten beschikbaar stelt in ESM-formaat.\n\nOndersteunt twee typen:\n\n * root:*: Exporteert broncodebestanden, bijv.: 'root:src/components/button.vue'\n * npm:*: Exporteert externe afhankelijkheden, bijv.: 'npm:vue'\n\nimports#\n\nImportconfiguratiemapping, configureert de externe modules die moeten worden\ngeïmporteerd en hun lokale paden.\n\nDe configuratie verschilt afhankelijk van de installatiemethode:\n\n * Broncode-installatie (Workspace, Git): moet naar de dist-directory wijzen\n * Pakketinstallatie (Link, statische server, privémirror, File): wijst direct\n   naar de pakketdirectory\n\nexternals#\n\nExterne afhankelijkheidsmapping, configureert de te gebruiken externe\nafhankelijkheden, meestal afhankelijkheden van externe modules.\n\nVoorbeeld:\n\n\n\n\nParsedModuleConfig#\n\n * Type Definitie:\n\n\n\nGeparseerde moduleconfiguratie, die de originele moduleconfiguratie omzet naar\neen gestandaardiseerd intern formaat:\n\nname#\n\nNaam van de huidige service\n\n * Gebruikt om de module te identificeren en importpaden te genereren\n\nroot#\n\nRootpad van de huidige service\n\n * Gebruikt om relatieve paden op te lossen en build-artefacten op te slaan\n\nexports#\n\nExportconfiguratielijst\n\n * name: Origineel exportpad, bijv.: 'npm:vue' of 'root:src/components'\n * type: Padtype (npm of root)\n * importName: Importnaam, formaat: '${serviceName}/${type}/${path}'\n * exportName: Exportpad, relatief ten opzichte van de serviceroot\n * exportPath: Werkelijk bestandspad\n * externalName: Naam van externe afhankelijkheid, gebruikt als identificatie\n   wanneer andere services deze module importeren\n\nimports#\n\nImportconfiguratielijst\n\n * name: Naam van de externe service\n * localPath: Lokaal opslagpad, gebruikt om build-artefacten van externe modules\n   op te slaan\n\nexternals#\n\nExterne afhankelijkheidsmapping\n\n * Mapt importpaden van modules naar de werkelijke modulelocatie\n * match: Reguliere expressie om importstatements te matchen\n * import: Werkelijk modulepad","routePath":"/nl/api/core/module-config","lang":"nl","toc":[{"text":"Type Definitie","id":"type-definitie","depth":2,"charIndex":193},{"text":"PathType","id":"pathtype","depth":3,"charIndex":211},{"text":"ModuleConfig","id":"moduleconfig-1","depth":3,"charIndex":-1},{"text":"exports","id":"exports","depth":4,"charIndex":539},{"text":"imports","id":"imports","depth":4,"charIndex":875},{"text":"externals","id":"externals","depth":4,"charIndex":1247},{"text":"ParsedModuleConfig","id":"parsedmoduleconfig","depth":3,"charIndex":1409},{"text":"name","id":"name","depth":4,"charIndex":1570},{"text":"root","id":"root","depth":4,"charIndex":1677},{"text":"exports","id":"exports-1","depth":4,"charIndex":1793},{"text":"imports","id":"imports-1","depth":4,"charIndex":2233},{"text":"externals","id":"externals-1","depth":4,"charIndex":2402}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Module Configuratie API Referentie","description":"Gedetailleerde uitleg over de ModuleConfig configuratie-interface van het Gez framework, inclusief module import/export regels, aliasconfiguratie en extern afhankelijkheidsbeheer, om ontwikkelaars te helpen het modulaire systeem van het framework beter te begrijpen.","head":[["meta",{"property":"keywords","content":"Gez, ModuleConfig, moduleconfiguratie, module import/export, externe afhankelijkheden, aliasconfiguratie, afhankelijkheidsbeheer, webapplicatieframework"}]]},"version":""},{"id":206,"title":"PackConfig","content":"#\n\nPackConfig is een interface voor het configureren van softwarepakketverpakking,\ngebruikt om de bouwresultaten van een service te verpakken in een standaard npm\n.tgz-formaat softwarepakket.\n\n * Standaardisatie: Gebruikt het standaard npm .tgz-verpakkingsformaat\n * Volledigheid: Bevat alle benodigde bestanden, zoals broncode,\n   typeverklaringen en configuratiebestanden\n * Compatibiliteit: Volledig compatibel met het npm-ecosysteem, ondersteunt\n   standaard pakketbeheerwerkstromen\n\n\nType Definitie#\n\n\n\n\nPackConfig#\n\nenable#\n\nGeeft aan of de verpakkingsfunctie is ingeschakeld. Indien ingeschakeld, worden\nde bouwresultaten verpakt in een standaard npm .tgz-formaat softwarepakket.\n\n * Type: boolean\n * Standaardwaarde: false\n\noutputs#\n\nSpecificeert het uitvoerpad van het softwarepakketbestand. Ondersteunt de\nvolgende configuratiemethoden:\n\n * string: Een enkel uitvoerpad, bijvoorbeeld 'dist/versions/my-app.tgz'\n * string[]: Meerdere uitvoerpaden, gebruikt om meerdere versies tegelijkertijd\n   te genereren\n * boolean: true gebruikt het standaardpad 'dist/client/versions/latest.tgz'\n\npackageJson#\n\nEen callback-functie voor het aanpassen van de inhoud van package.json. Wordt\naangeroepen vóór het verpakken, om de inhoud van package.json aan te passen.\n\n * Parameters:\n   * gez: Gez - Gez instantie\n   * pkg: any - Originele package.json inhoud\n * Retourwaarde: Promise - Aangepaste package.json inhoud\n\nVeelvoorkomende toepassingen:\n\n * Aanpassen van pakketnaam en versienummer\n * Toevoegen of bijwerken van afhankelijkheden\n * Toevoegen van aangepaste velden\n * Configureren van publicatiegerelateerde informatie\n\nVoorbeeld:\n\n\n\nonBefore#\n\nEen callback-functie voor voorbereidende werkzaamheden vóór het verpakken.\n\n * Parameters:\n   * gez: Gez - Gez instantie\n   * pkg: Record - package.json inhoud\n * Retourwaarde: Promise\n\nVeelvoorkomende toepassingen:\n\n * Toevoegen van extra bestanden (README, LICENSE, etc.)\n * Uitvoeren van tests of bouwvalidatie\n * Genereren van documentatie of metadata\n * Opruimen van tijdelijke bestanden\n\nVoorbeeld:\n\n\n\nonAfter#\n\nEen callback-functie voor afhandeling na het verpakken. Wordt aangeroepen nadat\nhet .tgz-bestand is gegenereerd, om het verpakkingsresultaat te verwerken.\n\n * Parameters:\n   * gez: Gez - Gez instantie\n   * pkg: Record - package.json inhoud\n   * file: Buffer - Inhoud van het verpakte bestand\n * Retourwaarde: Promise\n\nVeelvoorkomende toepassingen:\n\n * Publiceren naar een npm-repository (publiek of privé)\n * Uploaden naar een statische bestandsserver\n * Uitvoeren van versiebeheer\n * Triggeren van CI/CD-processen\n\nVoorbeeld:\n\n\n\n\nGebruiksvoorbeeld#\n\n","routePath":"/nl/api/core/pack-config","lang":"nl","toc":[{"text":"Type Definitie","id":"type-definitie","depth":2,"charIndex":488},{"text":"PackConfig","id":"packconfig-1","depth":3,"charIndex":-1},{"text":"enable","id":"enable","depth":4,"charIndex":521},{"text":"outputs","id":"outputs","depth":4,"charIndex":731},{"text":"packageJson","id":"packagejson","depth":4,"charIndex":1094},{"text":"onBefore","id":"onbefore","depth":4,"charIndex":1640},{"text":"onAfter","id":"onafter","depth":4,"charIndex":2059},{"text":"Gebruiksvoorbeeld","id":"gebruiksvoorbeeld","depth":2,"charIndex":2600}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Verpakkingsconfiguratie API Referentie","description":"Gedetailleerde uitleg over de PackConfig configuratie-interface van het Gez framework, inclusief softwarepakketverpakkingsregels, uitvoerconfiguratie en levenscyclushooks, om ontwikkelaars te helpen gestandaardiseerde bouwprocessen te implementeren.","head":[["meta",{"property":"keywords","content":"Gez, PackConfig, softwarepakketverpakking, bouwconfiguratie, levenscyclushooks, verpakkingsconfiguratie, webapplicatieframework"}]]},"version":""},{"id":207,"title":"RenderContext","content":"Hello World\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()} ${html}\n${rc.importmap()} ${rc.moduleEntry()} ${","routePath":"/nl/api/core/render-context","lang":"nl","toc":[{"text":"Type Definitie","id":"type-definitie","depth":2,"charIndex":-1},{"text":"ServerRenderHandle","id":"serverrenderhandle","depth":3,"charIndex":-1},{"text":"RenderFiles","id":"renderfiles","depth":3,"charIndex":-1},{"text":"ImportmapMode","id":"importmapmode","depth":3,"charIndex":-1},{"text":"Instantie Opties","id":"instantie-opties","depth":2,"charIndex":-1},{"text":"base","id":"base","depth":4,"charIndex":-1},{"text":"entryName","id":"entryname","depth":4,"charIndex":-1},{"text":"params","id":"params","depth":4,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-1","depth":4,"charIndex":-1},{"text":"Instantie Eigenschappen","id":"instantie-eigenschappen","depth":2,"charIndex":-1},{"text":"gez","id":"gez","depth":3,"charIndex":-1},{"text":"redirect","id":"redirect","depth":3,"charIndex":-1},{"text":"status","id":"status","depth":3,"charIndex":-1},{"text":"html","id":"html","depth":3,"charIndex":-1},{"text":"base","id":"base-1","depth":3,"charIndex":-1},{"text":"entryName","id":"entryname-1","depth":3,"charIndex":-1},{"text":"params","id":"params-1","depth":3,"charIndex":-1},{"text":"importMetaSet","id":"importmetaset","depth":3,"charIndex":-1},{"text":"files","id":"files","depth":3,"charIndex":-1},{"text":"importmapMode","id":"importmapmode-2","depth":3,"charIndex":-1},{"text":"Instantie Methoden","id":"instantie-methoden","depth":2,"charIndex":-1},{"text":"serialize()","id":"serialize","depth":3,"charIndex":-1},{"text":"state()","id":"state","depth":3,"charIndex":-1},{"text":"commit()","id":"commit","depth":3,"charIndex":-1},{"text":"preload()","id":"preload","depth":3,"charIndex":-1},{"text":"css()","id":"css","depth":3,"charIndex":-1},{"text":"importmap()","id":"importmap","depth":3,"charIndex":-1},{"text":"moduleEntry()","id":"moduleentry","depth":3,"charIndex":-1},{"text":"modulePreload()","id":"modulepreload","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Render Context API Referentie","description":"Gedetailleerde uitleg over de RenderContext kernklasse van het Gez framework, inclusief rendercontrole, resourcebeheer, statussynchronisatie en routeringscontrole, om ontwikkelaars te helpen efficiënte server-side rendering te realiseren.","head":[["meta",{"property":"keywords","content":"Gez, RenderContext, SSR, server-side rendering, render context, statussynchronisatie, resourcebeheer, webapplicatieframework"}]]},"version":""},{"id":208,"title":"Van componentdeling naar native modulariteit: De evolutie van het Gez microfrontend-framework","content":"Van componentdeling naar native modulariteit: De evolutie van het Gez\nmicrofrontend-framework#\n\n\nProjectachtergrond#\n\nIn de afgelopen jaren heeft de microfrontend-architectuur voortdurend gezocht\nnaar de juiste weg. Echter, wat we zagen, waren diverse complexe technische\noplossingen die met lagen van verpakkingen en kunstmatige isolatie een ideale\nmicrofrontend-wereld probeerden te simuleren. Deze oplossingen brachten zware\nprestatieverliezen met zich mee, maakten eenvoudige ontwikkeling complex en\nstandaardprocessen onduidelijk.\n\n\nBeperkingen van traditionele oplossingen#\n\nIn de praktijk van microfrontend-architectuur hebben we de vele beperkingen van\ntraditionele oplossingen diepgaand ervaren:\n\n * Prestatieverlies: Runtime-injectie van afhankelijkheden, JS-sandbox-proxies,\n   elke operatie verbruikt kostbare prestaties\n * Broze isolatie: Kunstmatig gecreëerde sandbox-omgevingen kunnen nooit de\n   native isolatiecapaciteiten van de browser evenaren\n * Complexiteit van bouwen: Om afhankelijkheidsrelaties te behandelen, moesten\n   bouwhulpmiddelen worden aangepast, waardoor eenvoudige projecten moeilijk te\n   onderhouden werden\n * Aangepaste regels: Speciale implementatiestrategieën, runtime-verwerking,\n   elke stap wijkt af van standaard moderne ontwikkelingsprocessen\n * Ecosysteembeperkingen: Framework-koppeling, aangepaste API's, waardoor\n   technologische keuzes gebonden waren aan specifieke ecosystemen\n\nDeze problemen kwamen vooral naar voren in een enterprise-project uit 2019. Een\ngroot product was opgedeeld in meer dan tien onafhankelijke bedrijfssubsystemen,\ndie een set basis- en bedrijfscomponenten moesten delen. Het oorspronkelijke op\nnpm-pakketten gebaseerde componentdelingssysteem toonde ernstige\nonderhoudsefficiëntieproblemen: wanneer gedeelde componenten werden bijgewerkt,\nmoesten alle subsystemen die afhankelijk waren van deze componenten een volledig\nbouw- en implementatieproces doorlopen.\n\n\nTechnische evolutie#\n\n\nv1.0: Verkenning van externe componenten#\n\nOm de efficiëntieproblemen van componentdeling op te lossen, introduceerde Gez\nv1.0 een RemoteView-componentmechanisme op basis van het HTTP-protocol. Deze\noplossing implementeerde runtime-dynamische aanvragen voor codeassemblage tussen\nservices, wat het probleem van te lange bouwafhankelijkheidsketens succesvol\noploste. Echter, door het ontbreken van een gestandaardiseerd\nruntime-communicatiemechanisme, bleven er efficiëntieknelpunten bestaan in\nstatus- en gebeurtenissynchronisatie tussen services.\n\n\nv2.0: Module Federation-poging#\n\nIn versie v2.0 hebben we de Module Federation-technologie van Webpack 5.0\ngeadopteerd. Deze technologie verbeterde de samenwerkingsefficiëntie tussen\nservices aanzienlijk door een uniform modulelaadmechanisme en\nruntime-containers. Echter, in grootschalige praktijken bracht de gesloten\nimplementatiemechanismen van Module Federation nieuwe uitdagingen met zich mee:\nnauwkeurig afhankelijkheidsversiebeheer was moeilijk te realiseren, vooral bij\nhet harmoniseren van gedeelde afhankelijkheden van meerdere services, waarbij\nvaak versieconflicten en runtime-uitzonderingen optraden.\n\n\nOmarmen van het ESM-tijdperk#\n\nBij het plannen van versie v3.0 hebben we de ontwikkelingsrichting van het\nfrontend-ecosysteem diepgaand geobserveerd en ontdekt dat de vooruitgang in\nnative browserfunctionaliteiten nieuwe mogelijkheden bood voor\nmicrofrontend-architectuur:\n\n\nGestandaardiseerd modulesysteem#\n\nMet de brede ondersteuning van ES Modules door mainstream browsers en de\nvolwassenheid van de Import Maps-specificatie, is frontend-ontwikkeling een echt\nmodulair tijdperk ingegaan. Volgens statistieken van Can I Use heeft de native\nondersteuning voor ESM in mainstream browsers (Chrome >= 89, Edge >= 89, Firefox\n>= 108, Safari >= 16.4) een percentage van 93,5% bereikt, wat ons de volgende\nvoordelen biedt:\n\n * Gestandaardiseerd afhankelijkheidsbeheer: Import Maps biedt de mogelijkheid\n   om moduleafhankelijkheden op browserniveau op te lossen, zonder complexe\n   runtime-injectie\n * Optimalisatie van bronbelasting: Het native modulecachemechanisme van de\n   browser verbetert de bronbelastingsefficiëntie aanzienlijk\n * Vereenvoudiging van bouwprocessen: De op ESM gebaseerde ontwikkelingsmodus\n   maakt bouwprocessen voor ontwikkelings- en productieomgevingen consistenter\n\nTegelijkertijd kunnen we, door ondersteuning voor compatibiliteitsmodi (Chrome\n>= 87, Edge >= 88, Firefox >= 78, Safari >= 14), de browserdekking verder\nverhogen tot 96,81%, waardoor we hoge prestaties kunnen behouden zonder\nondersteuning voor oudere browsers op te offeren.\n\n\nDoorbraken in prestaties en isolatie#\n\nHet native modulesysteem brengt niet alleen standaardisatie, maar ook een\nkwalitatieve verbetering in prestaties en isolatie:\n\n * Geen runtime-overhead: Afscheid van JavaScript-sandbox-proxies en\n   runtime-injectie in traditionele microfrontend-oplossingen\n * Betrouwbare isolatiemechanismen: De strikte modulescope van ESM biedt van\n   nature de meest betrouwbare isolatiecapaciteiten\n * Nauwkeurig afhankelijkheidsbeheer: Statische importanalyse maakt\n   afhankelijkheidsrelaties duidelijker en versiebeheer preciezer\n\n\nKeuze van bouwhulpmiddelen#\n\nBij de implementatie van technische oplossingen was de keuze van\nbouwhulpmiddelen een cruciaal beslissingspunt. Na bijna een jaar van technisch\nonderzoek en praktijk, heeft onze keuze de volgende evolutie doorgemaakt:\n\n 1. Verkenning van Vite\n    \n    * Voordeel: Op ESM gebaseerde ontwikkelserver, biedt een ultieme\n      ontwikkelingservaring\n    * Uitdaging: Verschillen tussen ontwikkelings- en productieomgevingen\n      brachten enige onzekerheid met zich mee\n\n 2. Rspack vaststellen\n    \n    * Prestatievoordeel: Op Rust gebaseerde high-performance compilatie,\n      verbetert de bouwsnelheid aanzienlijk\n    * Ecosysteemondersteuning: Hoge compatibiliteit met het Webpack-ecosysteem,\n      verlaagt migratiekosten\n    * ESM-ondersteuning: Praktijkervaring met het Rslib-project bevestigde de\n      betrouwbaarheid van ESM-bouw\n\nDeze beslissing stelde ons in staat om een stabielere ondersteuning voor\nproductieomgevingen te krijgen terwijl de ontwikkelingservaring behouden bleef.\nOp basis van de combinatie van ESM en Rspack hebben we uiteindelijk een\nhigh-performance, weinig invasieve microfrontend-oplossing gebouwd.\n\n\nToekomstperspectief#\n\nIn de toekomstige ontwikkelingsplannen zal het Gez-framework zich richten op de\nvolgende drie richtingen:\n\n\nDiepgaande optimalisatie van Import Maps#\n\n * Dynamisch afhankelijkheidsbeheer: Implementatie van intelligente\n   runtime-afhankelijkheidsversiescheduling om afhankelijkheidsconflicten tussen\n   meerdere applicaties op te lossen\n * Preload-strategieën: Op routeanalyse gebaseerde intelligente preloading om\n   bronbelastingsefficiëntie te verbeteren\n * Bouwoptimalisatie: Automatische generatie van optimale Import\n   Maps-configuraties om handmatige configuratiekosten voor ontwikkelaars te\n   verminderen\n\n\nFramework-onafhankelijke routeringsoplossing#\n\n * Uniforme routeringsabstractie: Ontwerp van een framework-onafhankelijke\n   routeringsinterface ter ondersteuning van mainstream frameworks zoals Vue,\n   React\n * Microapplicatieroutering: Implementatie van routeringskoppeling tussen\n   applicaties om URL- en applicatiestatusconsistentie te behouden\n * Routeringsmiddleware: Uitbreidbaar middlewaremechanisme ter ondersteuning van\n   functies zoals toegangscontrole en paginatransities\n\n\nBeste praktijken voor cross-framework communicatie#\n\n * Voorbeeldapplicatie: Bied een volledig voorbeeld van cross-framework\n   communicatie, inclusief mainstream frameworks zoals Vue, React, Preact\n * Statussynchronisatie: Op ESM gebaseerde lichtgewicht statusdelingsoplossing\n * Gebeurtenisbus: Gestandaardiseerd gebeurteniscommunicatiemechanisme ter\n   ondersteuning van ontkoppelde communicatie tussen applicaties\n\nMet deze optimalisaties en uitbreidingen hopen we Gez te maken tot een meer\ncompleet en gebruiksvriendelijk microfrontend-oplossing, dat ontwikkelaars een\nbetere ontwikkelingservaring en hogere ontwikkelingssnelheid biedt.","routePath":"/nl/blog/birth-of-gez","lang":"nl","toc":[{"text":"Projectachtergrond","id":"projectachtergrond","depth":2,"charIndex":96},{"text":"Beperkingen van traditionele oplossingen","id":"beperkingen-van-traditionele-oplossingen","depth":3,"charIndex":537},{"text":"Technische evolutie","id":"technische-evolutie","depth":2,"charIndex":1939},{"text":"v1.0: Verkenning van externe componenten","id":"v10-verkenning-van-externe-componenten","depth":3,"charIndex":1962},{"text":"v2.0: Module Federation-poging","id":"v20-module-federation-poging","depth":3,"charIndex":2512},{"text":"Omarmen van het ESM-tijdperk","id":"omarmen-van-het-esm-tijdperk","depth":2,"charIndex":3129},{"text":"Gestandaardiseerd modulesysteem","id":"gestandaardiseerd-modulesysteem","depth":3,"charIndex":3404},{"text":"Doorbraken in prestaties en isolatie","id":"doorbraken-in-prestaties-en-isolatie","depth":3,"charIndex":4596},{"text":"Keuze van bouwhulpmiddelen","id":"keuze-van-bouwhulpmiddelen","depth":3,"charIndex":5158},{"text":"Toekomstperspectief","id":"toekomstperspectief","depth":2,"charIndex":6317},{"text":"Diepgaande optimalisatie van Import Maps","id":"diepgaande-optimalisatie-van-import-maps","depth":3,"charIndex":6447},{"text":"Framework-onafhankelijke routeringsoplossing","id":"framework-onafhankelijke-routeringsoplossing","depth":3,"charIndex":6956},{"text":"Beste praktijken voor cross-framework communicatie","id":"beste-praktijken-voor-cross-framework-communicatie","depth":3,"charIndex":7444}],"domain":"","frontmatter":{"titleSuffix":"Van microfrontend-uitdagingen naar ESM-innovatie: De evolutie van het Gez-framework","description":"Een diepgaande verkenning van de evolutie van het Gez-framework, van de beperkingen van traditionele microfrontend-architecturen naar innovatieve doorbraken gebaseerd op ESM. Deel technische praktijkervaringen op het gebied van prestatieoptimalisatie, afhankelijkheidsbeheer en keuze van bouwhulpmiddelen.","head":[["meta",{"property":"keywords","content":"Gez, microfrontend-framework, ESM, Import Maps, Rspack, Module Federation, afhankelijkheidsbeheer, prestatieoptimalisatie, technische evolutie, server-side rendering"}]],"sidebar":false},"version":""},{"id":209,"title":"Team Blog","content":"#\n\nWelkom op de technische blog van het Gez-team! Hier delen we ervaringen,\ntechnologische innovaties en best practices uit het ontwikkelingsproces van\nframeworks.\n\n\nNieuwste Artikelen#\n\n * 2025-02-25 Van Componentendeling naar Native Modulariteit: De Evolutie van\n   het Gez Microfrontend Framework\n   \n   > Verken de evolutie van het Gez-framework van traditionele componentendeling\n   > naar native modulariteit gebaseerd op ESM. Deel technische\n   > praktijkervaringen op het gebied van prestatieoptimalisatie,\n   > afhankelijkheidsbeheer en keuze van bouwgereedschappen.","routePath":"/nl/blog/","lang":"nl","toc":[{"text":"Nieuwste Artikelen","id":"nieuwste-artikelen","depth":2,"charIndex":165}],"domain":"","frontmatter":{"titleSuffix":"Gez Team Blog","description":"Technische blog van het Gez-team, waarin we ervaringen, best practices en technologische innovaties op het gebied van frameworkontwikkeling delen.","head":[["meta",{"property":"keywords","content":"Gez, Team Blog, Technische Deling, Best Practices, Ontwikkelingservaring"}]],"sidebar":false},"version":""},{"id":210,"title":"Pad Alias","content":"#\n\nPad alias (Path Alias) is een mechanisme voor het mappen van module importpaden,\nwaarmee ontwikkelaars korte, semantische identificatoren kunnen gebruiken in\nplaats van volledige modulepaden. In Gez biedt het pad alias mechanisme de\nvolgende voordelen:\n\n * Vereenvoudiging van importpaden: Gebruik semantische aliassen in plaats van\n   lange relatieve paden, wat de leesbaarheid van de code verbetert\n * Vermijden van diepe nesting: Elimineer onderhoudsproblemen veroorzaakt door\n   meerdere directoryniveaus (bijv. ../../../../)\n * Typeveiligheid: Volledige integratie met het typesysteem van TypeScript, wat\n   codecompletion en typecontrole biedt\n * Module resolutie optimalisatie: Verbeter de module resolutieprestaties door\n   vooraf gedefinieerde padmapping\n\n\nStandaard Alias Mechanisme#\n\nGez gebruikt een automatisch aliasmechanisme op basis van servicenaam (Service\nName), waarbij conventie boven configuratie staat. Dit ontwerp heeft de volgende\nkenmerken:\n\n * Automatische configuratie: Genereer automatisch aliassen op basis van het\n   name veld in package.json, zonder handmatige configuratie\n * Uniforme normen: Zorg ervoor dat alle servicemodules consistente naamgevings-\n   en referentienormen volgen\n * Typeondersteuning: Werk samen met het commando npm run build:dts om\n   automatisch type declaratiebestanden te genereren, wat type-inferentie tussen\n   services mogelijk maakt\n * Voorspelbaarheid: Leid het referentiepad van de module af via de servicenaam,\n   wat de onderhoudskosten verlaagt\n\n\nConfiguratie Uitleg#\n\n\npackage.json Configuratie#\n\nDefinieer in package.json de naam van de service via het name veld. Deze naam\nwordt gebruikt als het standaard aliasvoorvoegsel van de service:\n\n\n\n\ntsconfig.json Configuratie#\n\nOm ervoor te zorgen dat TypeScript aliaspaden correct kan oplossen, moet je\npaths mapping configureren in tsconfig.json:\n\n\n\n\nGebruiksvoorbeelden#\n\n\nImporteren van Service Interne Modules#\n\n\n\n\nImporteren van Andere Service Modules#\n\n\n\nBeste Praktijken\n * Gebruik bij voorkeur aliaspaden in plaats van relatieve paden\n * Houd aliaspaden semantisch en consistent\n * Vermijd te veel directoryniveaus in aliaspaden\n\n\n\n\nImporteren over Services#\n\nWanneer module linking (Module Link) is geconfigureerd, kun je op dezelfde\nmanier modules van andere services importeren:\n\n\n\n\nAangepaste Aliassen#\n\nVoor third-party packages of speciale scenario's kun je aangepaste aliassen\nconfigureren via het Gez configuratiebestand:\n\n\n\nBelangrijke Opmerkingen\n 1. Voor bedrijfsmodules wordt aanbevolen om altijd het standaard\n    aliasmechanisme te gebruiken om consistentie in het project te behouden\n 2. Aangepaste aliassen worden voornamelijk gebruikt voor speciale vereisten van\n    third-party packages of om de ontwikkelervaring te optimaliseren\n 3. Overmatig gebruik van aangepaste aliassen kan de onderhoudbaarheid van de\n    code en build optimalisatie beïnvloeden","routePath":"/nl/guide/essentials/alias","lang":"nl","toc":[{"text":"Standaard Alias Mechanisme","id":"standaard-alias-mechanisme","depth":2,"charIndex":768},{"text":"Configuratie Uitleg","id":"configuratie-uitleg","depth":2,"charIndex":1516},{"text":"package.json Configuratie","id":"packagejson-configuratie","depth":3,"charIndex":1539},{"text":"tsconfig.json Configuratie","id":"tsconfigjson-configuratie","depth":3,"charIndex":1715},{"text":"Gebruiksvoorbeelden","id":"gebruiksvoorbeelden","depth":2,"charIndex":1869},{"text":"Importeren van Service Interne Modules","id":"importeren-van-service-interne-modules","depth":3,"charIndex":1892},{"text":"Importeren van Andere Service Modules","id":"importeren-van-andere-service-modules","depth":3,"charIndex":1936},{"text":"Importeren over Services","id":"importeren-over-services","depth":3,"charIndex":2158},{"text":"Aangepaste Aliassen","id":"aangepaste-aliassen","depth":3,"charIndex":2311}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Gids voor Module Import Pad Mapping","description":"Gedetailleerde uitleg over het pad alias mechanisme van het Gez framework, inclusief vereenvoudiging van importpaden, vermijden van diepe nesting, typeveiligheid en module resolutie optimalisatie, om ontwikkelaars te helpen de onderhoudbaarheid van code te verbeteren.","head":[["meta",{"property":"keywords","content":"Gez, Pad Alias, Path Alias, TypeScript, Module Import, Pad Mapping, Code Onderhoudbaarheid"}]]},"version":""},{"id":211,"title":"Basis Pad","content":"#\n\nHet basispad (Base Path) verwijst naar het voorvoegsel van het toegangspad voor\nstatische resources (zoals JavaScript, CSS, afbeeldingen, etc.) in een\napplicatie. In Gez is een juiste configuratie van het basispad cruciaal voor de\nvolgende scenario's:\n\n * Multi-omgeving Implementatie: Ondersteuning voor resource toegang in\n   verschillende omgevingen zoals ontwikkelomgeving, testomgeving en\n   productieomgeving\n * Multi-regio Implementatie: Aanpassing aan clusterimplementatiebehoeften in\n   verschillende regio's of landen\n * CDN Distributie: Wereldwijde distributie en versnelling van statische\n   resources\n\n\nStandaard Pad Mechanisme#\n\nGez gebruikt een automatisch padgeneratiemechanisme gebaseerd op de servicenaam.\nStandaard leest het framework het name veld in het project package.json om het\nbasispad voor statische resources te genereren: /your-app-name/.\n\n\n\nDit ontwerp, dat conventie boven configuratie verkiest, heeft de volgende\nvoordelen:\n\n * Consistentie: Zorgt ervoor dat alle statische resources een uniform\n   toegangspad gebruiken\n * Voorspelbaarheid: Het toegangspad van resources kan worden afgeleid via het\n   name veld in package.json\n * Onderhoudbaarheid: Geen extra configuratie nodig, wat de onderhoudskosten\n   verlaagt\n\n\nDynamische Pad Configuratie#\n\nIn praktijkprojecten moeten we vaak dezelfde code implementeren in verschillende\nomgevingen of regio's. Gez biedt ondersteuning voor dynamische basispaden,\nwaardoor applicaties zich kunnen aanpassen aan verschillende\nimplementatiescenario's.\n\n\nGebruiksscenario's#\n\nImplementatie in Subdirectory#\n\n\n\nImplementatie op Onafhankelijk Domein#\n\n\n\n\nConfiguratiemethode#\n\nVia de base parameter van de gez.render() methode kun je het basispad dynamisch\ninstellen op basis van de request context:\n\n","routePath":"/nl/guide/essentials/base-path","lang":"nl","toc":[{"text":"Standaard Pad Mechanisme","id":"standaard-pad-mechanisme","depth":2,"charIndex":618},{"text":"Dynamische Pad Configuratie","id":"dynamische-pad-configuratie","depth":2,"charIndex":1254},{"text":"Gebruiksscenario's","id":"gebruiksscenarios","depth":3,"charIndex":1528},{"text":"Implementatie in Subdirectory","id":"implementatie-in-subdirectory","depth":4,"charIndex":1549},{"text":"Implementatie op Onafhankelijk Domein","id":"implementatie-op-onafhankelijk-domein","depth":4,"charIndex":1583},{"text":"Configuratiemethode","id":"configuratiemethode","depth":3,"charIndex":1626}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Statische Resource Path Configuratiehandleiding","description":"Gedetailleerde uitleg over de basispadconfiguratie van het Gez framework, inclusief multi-omgeving implementatie, CDN distributie en resource toegangspad instellingen, om ontwikkelaars te helpen bij het realiseren van flexibel statisch resourcebeheer.","head":[["meta",{"property":"keywords","content":"Gez, Basis Pad, Base Path, CDN, Statische Resources, Multi-omgeving Implementatie, Resourcebeheer"}]]},"version":""},{"id":212,"title":"Client-side rendering","content":"\n${rc.importmap()} // Importmap ${rc.moduleEntry()} // Ingangsmodule\n${rc.modulePreload()} // Module preload","routePath":"/nl/guide/essentials/csr","lang":"nl","toc":[{"text":"Gebruiksscenario's","id":"gebruiksscenarios","depth":2,"charIndex":-1},{"text":"Configuratie-uitleg","id":"configuratie-uitleg","depth":2,"charIndex":-1},{"text":"HTML-sjabloonconfiguratie","id":"html-sjabloonconfiguratie","depth":3,"charIndex":-1},{"text":"Statische HTML-generatie","id":"statische-html-generatie","depth":3,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Handleiding voor client-side rendering in het Gez-framework","description":"Gedetailleerde uitleg over het client-side rendering-mechanisme van het Gez-framework, inclusief statische bouw, implementatiestrategieën en best practices, om ontwikkelaars te helpen efficiënte front-end rendering te realiseren in een serverloze omgeving.","head":[["meta",{"property":"keywords","content":"Gez, client-side rendering, CSR, statische bouw, front-end rendering, serverloze implementatie, prestatieoptimalisatie"}]]},"version":""},{"id":213,"title":"Module Linking","content":"#\n\nHet Gez framework biedt een compleet module linking mechanisme voor het beheren\nvan code sharing en afhankelijkheden tussen services. Dit mechanisme is\ngebaseerd op de ESM (ECMAScript Module) specificatie en ondersteunt het\nexporteren en importeren van modules op broncodeniveau, evenals volledige\ndependency management functionaliteit.\n\n\nKernconcepten#\n\nModule Exporteren#\n\nModule exporteren is het proces waarbij specifieke code-eenheden (zoals\ncomponenten, utility functies, etc.) vanuit een service worden blootgesteld in\nESM-formaat. Er worden twee exporttypen ondersteund:\n\n * Broncode Exporteren: Direct exporteren van broncodebestanden uit het project\n * Dependency Exporteren: Exporteren van gebruikte third-party dependencies\n\nModule Importeren#\n\nModule importeren is het proces waarbij code-eenheden die door andere services\nzijn geëxporteerd, worden geïmporteerd in een service. Er worden meerdere\ninstallatiemethoden ondersteund:\n\n * Broncode Installatie: Geschikt voor ontwikkelomgevingen, ondersteunt\n   real-time wijzigingen en hot reloading\n * Pakket Installatie: Geschikt voor productieomgevingen, maakt gebruik van\n   build artifacts\n\n\nPreloading Mechanism#\n\nOm de serviceprestaties te optimaliseren, heeft Gez een intelligent module\npreloading mechanisme geïmplementeerd:\n\n 1. Dependency Analyse\n    \n    * Analyseer de afhankelijkheden tussen componenten tijdens het bouwen\n    * Identificeer kernmodules op kritieke paden\n    * Bepaal de laadprioriteit van modules\n\n 2. Laadstrategie\n    \n    * Direct Laden: Kernmodules op kritieke paden\n    * Uitgesteld Laden: Niet-kritieke functionaliteitsmodules\n    * Op Vraag Laden: Modules die conditioneel worden gerenderd\n\n 3. Resource Optimalisatie\n    \n    * Intelligente code splitting strategie\n    * Cachebeheer op moduleniveau\n    * Compileren en bundelen op aanvraag\n\n\nModule Exporteren#\n\n\nConfiguratie Uitleg#\n\nConfigureer de te exporteren modules in entry.node.ts:\n\n\n\nDe exportconfiguratie ondersteunt twee typen:\n\n * root:*: Exporteer broncodebestanden, pad relatief ten opzichte van de\n   projectroot\n * npm:*: Exporteer third-party dependencies, specificeer direct de pakketnaam\n\n\nModule Importeren#\n\n\nConfiguratie Uitleg#\n\nConfigureer de te importeren modules in entry.node.ts:\n\n\n\nConfiguratie uitleg:\n\n 1. imports: Configureer het lokale pad van externe modules\n    \n    * Broncode Installatie: Verwijs naar de build artifact directory (dist)\n    * Pakket Installatie: Verwijs direct naar de pakketdirectory\n\n 2. externals: Configureer externe dependencies\n    \n    * Voor het delen van dependencies tussen externe modules\n    * Voorkomt dubbele bundeling van dezelfde dependencies\n    * Ondersteunt het delen van dependencies tussen meerdere modules\n\n\nInstallatiemethoden#\n\nBroncode Installatie#\n\nGeschikt voor ontwikkelomgevingen, ondersteunt real-time wijzigingen en hot\nreloading.\n\n 1. Workspace Methode Aanbevolen voor gebruik in Monorepo projecten:\n\n\n\n 2. Link Methode Voor lokale ontwikkeling en debugging:\n\n\n\nPakket Installatie#\n\nGeschikt voor productieomgevingen, maakt direct gebruik van build artifacts.\n\n 1. NPM Registry Installatie via npm registry:\n\n\n\n 2. Statische Server Installatie via HTTP/HTTPS protocol:\n\n\n\n\nPakket Bouwen#\n\n\nConfiguratie Uitleg#\n\nConfigureer de build opties in entry.node.ts:\n\n\n\n\nBuild Artifacts#\n\n\n\n\nPublicatieproces#\n\n\n\n\nBest Practices#\n\n\nOntwikkelomgeving Configuratie#\n\n * Dependency Management\n   \n   * Gebruik Workspace of Link methode voor dependency installatie\n   * Beheer dependency versies centraal\n   * Voorkom dubbele installatie van dezelfde dependencies\n\n * Ontwikkelervaring\n   \n   * Schakel hot reloading in\n   * Configureer een geschikte preloading strategie\n   * Optimaliseer build snelheid\n\n\nProductieomgeving Configuratie#\n\n * Deploy Strategie\n   \n   * Gebruik NPM Registry of een statische server\n   * Zorg voor integriteit van build artifacts\n   * Implementeer een canary release mechanisme\n\n * Prestatieoptimalisatie\n   \n   * Configureer resource preloading op de juiste manier\n   * Optimaliseer module laadvolgorde\n   * Implementeer effectieve caching strategieën\n\n\nVersiebeheer#\n\n * Versiebeheerrichtlijnen\n   \n   * Volg semantische versiebeheerrichtlijnen\n   * Onderhoud gedetailleerde changelogs\n   * Voer compatibiliteitstesten uit voor versies\n\n * Dependency Updates\n   \n   * Update dependencies tijdig\n   * Voer regelmatig security audits uit\n   * Houd dependency versies consistent","routePath":"/nl/guide/essentials/module-link","lang":"nl","toc":[{"text":"Kernconcepten","id":"kernconcepten","depth":3,"charIndex":341},{"text":"Module Exporteren","id":"module-exporteren","depth":4,"charIndex":357},{"text":"Module Importeren","id":"module-importeren","depth":4,"charIndex":739},{"text":"Preloading Mechanism","id":"preloading-mechanism","depth":3,"charIndex":1157},{"text":"Module Exporteren","id":"module-exporteren-1","depth":2,"charIndex":1843},{"text":"Configuratie Uitleg","id":"configuratie-uitleg","depth":3,"charIndex":1864},{"text":"Module Importeren","id":"module-importeren-1","depth":2,"charIndex":2160},{"text":"Configuratie Uitleg","id":"configuratie-uitleg-1","depth":3,"charIndex":2181},{"text":"Installatiemethoden","id":"installatiemethoden","depth":3,"charIndex":2734},{"text":"Broncode Installatie","id":"broncode-installatie","depth":4,"charIndex":2756},{"text":"Pakket Installatie","id":"pakket-installatie","depth":4,"charIndex":2998},{"text":"Pakket Bouwen","id":"pakket-bouwen","depth":2,"charIndex":3209},{"text":"Configuratie Uitleg","id":"configuratie-uitleg-2","depth":3,"charIndex":3226},{"text":"Build Artifacts","id":"build-artifacts","depth":3,"charIndex":3298},{"text":"Publicatieproces","id":"publicatieproces","depth":3,"charIndex":3319},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":3341},{"text":"Ontwikkelomgeving Configuratie","id":"ontwikkelomgeving-configuratie","depth":3,"charIndex":3359},{"text":"Productieomgeving Configuratie","id":"productieomgeving-configuratie","depth":3,"charIndex":3730},{"text":"Versiebeheer","id":"versiebeheer","depth":3,"charIndex":4109}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Service Interoperability Code Sharing Mechanism","description":"Gedetailleerde uitleg over de module linking mechanismen van het Gez framework, inclusief code sharing tussen services, dependency management en ESM-specificatie implementatie, om ontwikkelaars te helpen efficiënte micro-frontend applicaties te bouwen.","head":[["meta",{"property":"keywords","content":"Gez, Module Linking, Module Link, ESM, Code Sharing, Dependency Management, Micro-frontend"}]]},"version":""},{"id":214,"title":"RenderContext","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/nl/guide/essentials/render-context","lang":"nl","toc":[{"text":"Gebruikswijze","id":"gebruikswijze","depth":2,"charIndex":-1},{"text":"Belangrijkste functionaliteiten","id":"belangrijkste-functionaliteiten","depth":2,"charIndex":-1},{"text":"Afhankelijkheidsverzameling","id":"afhankelijkheidsverzameling","depth":3,"charIndex":-1},{"text":"Op aanvraag verzamelen","id":"op-aanvraag-verzamelen","depth":4,"charIndex":-1},{"text":"Automatische verwerking","id":"automatische-verwerking","depth":4,"charIndex":-1},{"text":"Prestatieoptimalisatie","id":"prestatieoptimalisatie","depth":4,"charIndex":-1},{"text":"Resource-injectie","id":"resource-injectie","depth":3,"charIndex":-1},{"text":"Resource-injectievolgorde","id":"resource-injectievolgorde","depth":3,"charIndex":-1},{"text":"Volledig renderproces","id":"volledig-renderproces","depth":2,"charIndex":-1},{"text":"Geavanceerde functies","id":"geavanceerde-functies","depth":2,"charIndex":-1},{"text":"Basispadconfiguratie","id":"basispadconfiguratie","depth":3,"charIndex":-1},{"text":"Import mapping-modus","id":"import-mapping-modus","depth":3,"charIndex":-1},{"text":"Entry-functieconfiguratie","id":"entry-functieconfiguratie","depth":3,"charIndex":-1},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Server-Side Rendering Kernmechanisme","description":"Gedetailleerde uitleg over het RenderContext-mechanisme van het Gez-framework, inclusief resourcebeheer, HTML-generatie en het ESM-modulesysteem, om ontwikkelaars te helpen bij het begrijpen en gebruiken van server-side rendering-functionaliteit.","head":[["meta",{"property":"keywords","content":"Gez, RenderContext, SSR, Server-Side Rendering, ESM, Resourcebeheer"}]]},"version":""},{"id":215,"title":"Rspack","content":"#\n\nGez is gebaseerd op het Rspack build-systeem en maakt optimaal gebruik van de\nhigh-performance build-capaciteiten van Rspack. Dit document beschrijft de rol\nen kernfuncties van Rspack binnen het Gez framework.\n\n\nKenmerken#\n\nRspack is het kern build-systeem van het Gez framework en biedt de volgende\nbelangrijke kenmerken:\n\n * High-performance builds: Een build-engine gebaseerd op Rust, die extreem\n   snelle compilatiesnelheden biedt en de build-snelheid van grote projecten\n   aanzienlijk verbetert.\n * Ontwikkelingservaring optimalisatie: Ondersteuning voor moderne\n   ontwikkelingsfuncties zoals hot module replacement (HMR) en incrementele\n   compilatie, wat zorgt voor een soepele ontwikkelingservaring.\n * Multi-omgeving builds: Uniforme build-configuratie die client-side (client),\n   server-side (server) en Node.js (node) omgevingen ondersteunt, wat het\n   ontwikkelingsproces voor meerdere platforms vereenvoudigt.\n * Resource-optimalisatie: Ingebouwde mogelijkheden voor resource-verwerking en\n   -optimalisatie, inclusief code-splitting, Tree Shaking en\n   resource-compressie.\n\n\nApplicatie bouwen#\n\nHet Rspack build-systeem van Gez is modulair opgebouwd en bestaat uit de\nvolgende kernmodules:\n\n\n@gez/rspack#\n\nDe basis build-module, die de volgende kernmogelijkheden biedt:\n\n * Uniforme build-configuratie: Biedt gestandaardiseerd beheer van\n   build-configuraties en ondersteunt configuraties voor meerdere omgevingen.\n * Resource-verwerking: Ingebouwde ondersteuning voor het verwerken van\n   TypeScript, CSS, afbeeldingen en andere resources.\n * Build-optimalisatie: Biedt functies zoals code-splitting en Tree Shaking voor\n   prestatie-optimalisatie.\n * Ontwikkelingsserver: Geïntegreerde high-performance ontwikkelingsserver met\n   ondersteuning voor HMR.\n\n\n@gez/rspack-vue#\n\nSpeciale build-module voor het Vue framework, die het volgende biedt:\n\n * Vue-component compilatie: Ondersteunt efficiënte compilatie van Vue 2/3\n   componenten.\n * SSR-optimalisatie: Specifieke optimalisaties voor server-side rendering\n   scenario's.\n * Ontwikkelingsverbeteringen: Specifieke functieverbeteringen voor de\n   Vue-ontwikkelingsomgeving.\n\n\nBuild-proces#\n\nHet build-proces van Gez bestaat uit de volgende fasen:\n\n 1. Configuratie-initialisatie\n    \n    * Laad projectconfiguratie\n    * Voeg standaardconfiguratie en gebruikersconfiguratie samen\n    * Pas configuratie aan op basis van omgevingsvariabelen\n\n 2. Resource-compilatie\n    \n    * Analyseer broncode-afhankelijkheden\n    * Transformeer verschillende resources (TypeScript, CSS, etc.)\n    * Verwerk module-imports en -exports\n\n 3. Optimalisatie\n    \n    * Voer code-splitting uit\n    * Pas Tree Shaking toe\n    * Comprimeer code en resources\n\n 4. Output-generatie\n    \n    * Genereer doelbestanden\n    * Genereer resource-mapping\n    * Genereer build-rapporten\n\n\nBest Practices#\n\n\nOntwikkelingsomgeving optimalisatie#\n\n * Incrementele compilatie-configuratie: Configureer de cache-optie op de juiste\n   manier om de build-snelheid te verhogen door gebruik te maken van caching.\n * HMR-optimalisatie: Configureer het bereik van hot module replacement om\n   onnodige module-updates te voorkomen.\n * Resource-verwerking optimalisatie: Gebruik geschikte loader-configuraties om\n   dubbele verwerking te voorkomen.\n\n\nProductieomgeving optimalisatie#\n\n * Code-splitting strategie: Configureer splitChunks op de juiste manier om\n   resource-laden te optimaliseren.\n * Resource-compressie: Schakel geschikte compressie-configuraties in om een\n   balans te vinden tussen build-tijd en bestandsgrootte.\n * Cache-optimalisatie: Maak gebruik van content-hashing en langetermijn-caching\n   strategieën om de laadprestaties te verbeteren.\n\n\nConfiguratievoorbeeld#\n\n\n\nTIP\n\nVoor meer gedetailleerde API-beschrijvingen en configuratie-opties, raadpleeg de\nRspack API-documentatie.","routePath":"/nl/guide/essentials/rspack","lang":"nl","toc":[{"text":"Kenmerken","id":"kenmerken","depth":2,"charIndex":214},{"text":"Applicatie bouwen","id":"applicatie-bouwen","depth":2,"charIndex":1096},{"text":"@gez/rspack","id":"gezrspack","depth":3,"charIndex":1213},{"text":"@gez/rspack-vue","id":"gezrspack-vue","depth":3,"charIndex":1780},{"text":"Build-proces","id":"build-proces","depth":2,"charIndex":2153},{"text":"Best Practices","id":"best-practices","depth":2,"charIndex":2834},{"text":"Ontwikkelingsomgeving optimalisatie","id":"ontwikkelingsomgeving-optimalisatie","depth":3,"charIndex":2852},{"text":"Productieomgeving optimalisatie","id":"productieomgeving-optimalisatie","depth":3,"charIndex":3283},{"text":"Configuratievoorbeeld","id":"configuratievoorbeeld","depth":2,"charIndex":3698}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework High-Performance Build Engine","description":"Diepgaande analyse van het Rspack build-systeem van het Gez framework, inclusief kernfuncties zoals high-performance compilatie, multi-omgeving builds, en resource-optimalisatie, om ontwikkelaars te helpen bij het bouwen van efficiënte en betrouwbare moderne webapplicaties.","head":[["meta",{"property":"keywords","content":"Gez, Rspack, build-systeem, high-performance compilatie, hot reload, multi-omgeving builds, Tree Shaking, code-splitting, SSR, resource-optimalisatie, ontwikkelingsproductiviteit, build-tools"}]]},"version":""},{"id":216,"title":"Standaardrichtlijnen","content":"#\n\nGez is een modern SSR-framework dat gebruikmaakt van gestandaardiseerde\nprojectstructuren en padresolutiemechanismen om consistentie en\nonderhoudbaarheid van projecten in ontwikkelings- en productieomgevingen te\nwaarborgen.\n\n\nProjectstructuurrichtlijnen#\n\n\nStandaard mappenstructuur#\n\n\n\nUitbreidingskennis\n * gez.name is afkomstig van het name-veld in package.json\n * dist/package.json is afkomstig van de package.json in de hoofdmap\n * Het archief van de dist-map wordt alleen gemaakt als packs.enable is\n   ingesteld op true\n\n\nIngangsbestandsrichtlijnen#\n\n\nentry.client.ts#\n\nHet client-side ingangsbestand is verantwoordelijk voor:\n\n * Applicatie-initialisatie: Basisinstellingen van de client-side applicatie\n   configureren\n * Routemanagement: Client-side routing en navigatie afhandelen\n * Statusmanagement: Opslag en updates van client-side status implementeren\n * Interactiebeheer: Gebruikersgebeurtenissen en interface-interacties beheren\n\n\nentry.server.ts#\n\nHet server-side ingangsbestand is verantwoordelijk voor:\n\n * Server-side rendering: SSR-renderproces uitvoeren\n * HTML-generatie: Initiële paginastructuur bouwen\n * Data prefetching: Server-side dataverwerking afhandelen\n * Statusinjectie: Server-side status doorgeven aan de client\n * SEO-optimalisatie: Zoekmachineoptimalisatie van pagina's waarborgen\n\n\nentry.node.ts#\n\nHet Node.js server-ingangsbestand is verantwoordelijk voor:\n\n * Serverconfiguratie: HTTP-serverparameters instellen\n * Routebehandeling: Server-side routeringsregels beheren\n * Middleware-integratie: Server-middleware configureren\n * Omgevingsbeheer: Omgevingsvariabelen en configuraties afhandelen\n * Verzoek-respons: HTTP-verzoeken en -responsen afhandelen\n\n\nConfiguratiebestandsrichtlijnen#\n\n\npackage.json#\n\n\n\n\ntsconfig.json#\n\n","routePath":"/nl/guide/essentials/std","lang":"nl","toc":[{"text":"Projectstructuurrichtlijnen","id":"projectstructuurrichtlijnen","depth":2,"charIndex":228},{"text":"Standaard mappenstructuur","id":"standaard-mappenstructuur","depth":3,"charIndex":259},{"text":"Ingangsbestandsrichtlijnen","id":"ingangsbestandsrichtlijnen","depth":2,"charIndex":531},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":561},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":951},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":1325},{"text":"Configuratiebestandsrichtlijnen","id":"configuratiebestandsrichtlijnen","depth":2,"charIndex":1702},{"text":"package.json","id":"packagejson","depth":3,"charIndex":1737},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":1755}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Projectstructuur en Richtlijnenhandleiding","description":"Gedetailleerde uitleg over de standaard projectstructuur, ingangsbestandsrichtlijnen en configuratiebestandsrichtlijnen van het Gez framework, om ontwikkelaars te helpen gestandaardiseerde en onderhoudbare SSR-toepassingen te bouwen.","head":[["meta",{"property":"keywords","content":"Gez, projectstructuur, ingangsbestand, configuratierichtlijnen, SSR-framework, TypeScript, projectrichtlijnen, ontwikkelingsstandaarden"}]]},"version":""},{"id":217,"title":"HTML","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/nl/guide/frameworks/html","lang":"nl","toc":[{"text":"Projectstructuur","id":"projectstructuur","depth":2,"charIndex":-1},{"text":"Projectconfiguratie","id":"projectconfiguratie","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Broncodestructuur","id":"broncodestructuur","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Project uitvoeren","id":"project-uitvoeren","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework HTML SSR Applicatie Voorbeeld","description":"Leer hoe je een HTML SSR applicatie bouwt met Gez vanaf nul. Dit voorbeeld demonstreert de basisgebruik van het framework, inclusief projectinitialisatie, HTML configuratie en instellingen van het ingangsbestand.","head":[["meta",{"property":"keywords","content":"Gez, HTML, SSR applicatie, TypeScript configuratie, projectinitialisatie, server-side rendering, client-side interactie"}]]},"version":""},{"id":218,"title":"Preact+HTM","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/nl/guide/frameworks/preact-htm","lang":"nl","toc":[{"text":"Projectstructuur","id":"projectstructuur","depth":2,"charIndex":-1},{"text":"Projectconfiguratie","id":"projectconfiguratie","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Broncodestructuur","id":"broncodestructuur","depth":2,"charIndex":-1},{"text":"app.ts","id":"appts","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Project uitvoeren","id":"project-uitvoeren","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Preact+HTM SSR Applicatievoorbeeld","description":"Leer hoe je een Preact+HTM SSR-applicatie bouwt met het Gez-framework vanaf nul. Dit voorbeeld demonstreert de basisgebruik van het framework, inclusief projectinitialisatie, Preact-configuratie en instellingen voor het invoerbestand.","head":[["meta",{"property":"keywords","content":"Gez, Preact, HTM, SSR-applicatie, TypeScript-configuratie, projectinitialisatie, server-side rendering, client-side interactie"}]]},"version":""},{"id":219,"title":"Vue2","content":"${html} ${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/nl/guide/frameworks/vue2","lang":"nl","toc":[{"text":"Projectstructuur","id":"projectstructuur","depth":2,"charIndex":-1},{"text":"Projectconfiguratie","id":"projectconfiguratie","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Broncodestructuur","id":"broncodestructuur","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Project uitvoeren","id":"project-uitvoeren","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue2 SSR Applicatievoorbeeld","description":"Leer hoe je een Vue2 SSR-applicatie bouwt met Gez vanaf nul. Dit voorbeeld demonstreert de basisgebruik van het framework, inclusief projectinitialisatie, Vue2-configuratie en instellingen voor toegangsbestanden.","head":[["meta",{"property":"keywords","content":"Gez, Vue2, SSR-applicatie, TypeScript-configuratie, projectinitialisatie, server-side rendering, client-side interactie"}]]},"version":""},{"id":220,"title":"Vue3","content":"${html}\n${rc.importmap()} ${rc.moduleEntry()} ${rc.modulePreload()}","routePath":"/nl/guide/frameworks/vue3","lang":"nl","toc":[{"text":"Projectstructuur","id":"projectstructuur","depth":2,"charIndex":-1},{"text":"Projectconfiguratie","id":"projectconfiguratie","depth":2,"charIndex":-1},{"text":"package.json","id":"packagejson","depth":3,"charIndex":-1},{"text":"tsconfig.json","id":"tsconfigjson","depth":3,"charIndex":-1},{"text":"Broncodestructuur","id":"broncodestructuur","depth":2,"charIndex":-1},{"text":"app.vue","id":"appvue","depth":3,"charIndex":-1},{"text":"create-app.ts","id":"create-appts","depth":3,"charIndex":-1},{"text":"entry.client.ts","id":"entryclientts","depth":3,"charIndex":-1},{"text":"entry.node.ts","id":"entrynodets","depth":3,"charIndex":-1},{"text":"entry.server.ts","id":"entryserverts","depth":3,"charIndex":-1},{"text":"Project uitvoeren","id":"project-uitvoeren","depth":2,"charIndex":-1}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Vue3 SSR Applicatievoorbeeld","description":"Leer hoe je een Vue3 SSR-applicatie bouwt met Gez vanaf nul. Dit voorbeeld demonstreert de basisgebruik van het framework, inclusief projectinitialisatie, Vue3-configuratie en instellingen voor toegangsbestanden.","head":[["meta",{"property":"keywords","content":"Gez, Vue3, SSR-applicatie, TypeScript-configuratie, projectinitialisatie, server-side rendering, client-side interactie, Composition API"}]]},"version":""},{"id":221,"title":"Omgevingseisen","content":"#\n\nDit document beschrijft de omgevingseisen die nodig zijn om dit framework te\ngebruiken, inclusief de Node.js-omgeving en browsercompatibiliteit.\n\n\nNode.js-omgeving#\n\nHet framework vereist Node.js versie >= 22.6, voornamelijk om\nTypeScript-type-importen te ondersteunen (via de --experimental-strip-types\nvlag), zonder extra compilatiestappen.\n\n\nBrowsercompatibiliteit#\n\nHet framework gebruikt standaard een compatibiliteitsmodus om een breder scala\naan browsers te ondersteunen. Houd er echter rekening mee dat voor volledige\nbrowsercompatibiliteit handmatig de es-module-shims afhankelijkheid moet worden\ntoegevoegd.\n\n\nCompatibiliteitsmodus (standaard)#\n\n * 🌐 Chrome: >= 87\n * 🔷 Edge: >= 88\n * 🦊 Firefox: >= 78\n * 🧭 Safari: >= 14\n\nVolgens de statistieken van Can I Use bedraagt de browserdekking in de\ncompatibiliteitsmodus 96,81%.\n\n\nNative ondersteuningsmodus#\n\n * 🌐 Chrome: >= 89\n * 🔷 Edge: >= 89\n * 🦊 Firefox: >= 108\n * 🧭 Safari: >= 16.4\n\nDe native ondersteuningsmodus biedt de volgende voordelen:\n\n * Geen runtime-overhead, geen extra moduleloader nodig\n * Native browserparsing, snellere uitvoeringssnelheid\n * Betere code-splitsing en mogelijkheden voor on-demand laden\n\nVolgens de statistieken van Can I Use bedraagt de browserdekking in de\ncompatibiliteitsmodus 93,5%.\n\n\nCompatibiliteitsondersteuning inschakelen#\n\nBelangrijke opmerking\n\nHoewel het framework standaard in de compatibiliteitsmodus wordt gebouwd, moet u\nvoor volledige ondersteuning van oudere browsers handmatig de es-module-shims\nafhankelijkheid toevoegen aan uw project.\n\nVoeg het volgende script toe aan uw HTML-bestand:\n\n\n\nBeste praktijken\n 1. Aanbevelingen voor de productieomgeving:\n    * Implementeer es-module-shims op uw eigen server\n    * Zorg voor stabiliteit en toegangssnelheid van bronnen\n    * Vermijd mogelijke beveiligingsrisico's\n 2. Prestatieoverwegingen:\n    * De compatibiliteitsmodus brengt een kleine prestatieoverhead met zich mee\n    * Beslis op basis van de browserverdeling van uw doelgebruikersgroep of u\n      deze wilt inschakelen","routePath":"/nl/guide/start/environment","lang":"nl","toc":[{"text":"Node.js-omgeving","id":"nodejs-omgeving","depth":2,"charIndex":149},{"text":"Browsercompatibiliteit","id":"browsercompatibiliteit","depth":2,"charIndex":347},{"text":"Compatibiliteitsmodus (standaard)","id":"compatibiliteitsmodus-standaard","depth":3,"charIndex":622},{"text":"Native ondersteuningsmodus","id":"native-ondersteuningsmodus","depth":3,"charIndex":841},{"text":"Compatibiliteitsondersteuning inschakelen","id":"compatibiliteitsondersteuning-inschakelen","depth":3,"charIndex":1290}],"domain":"","frontmatter":{"titleSuffix":"Gez Framework Compatibiliteitsgids","description":"Gedetailleerde uitleg over de omgevingseisen van het Gez-framework, inclusief Node.js-versievereisten en browsercompatibiliteit, om ontwikkelaars te helpen bij het correct configureren van de ontwikkelomgeving.","head":[["meta",{"property":"keywords","content":"Gez, Node.js, browsercompatibiliteit, TypeScript, es-module-shims, omgevingsconfiguratie"}]]},"version":""},{"id":222,"title":"Snel starten","content":"#\n\n\nProjectinitialisatie#\n\nVolg deze stappen om een nieuw Gez-project aan te maken en te initialiseren:\n\n\n\n\nFrameworkversiekeuze#\n\nHet Gez Framework biedt meerdere technologiestapelversies, elk geoptimaliseerd\nvoor verschillende toepassingsscenario's. Kies de juiste versie op basis van je\nprojectvereisten:\n\n\nHTML#\n\nGeschikt voor projecten die streven naar een minimale architectuur:\n\n * Geen externe afhankelijkheden, direct klaar voor gebruik\n * Native JavaScript-ontwikkelervaring\n * Ideaal voor het bouwen van statische websites en lichtgewicht applicaties\n * Ondersteuning voor geleidelijke functie-uitbreiding\n\nBekijk de gedetailleerde documentatie voor de HTML-versie\n\n\nVue2#\n\nGeschikt voor de ontwikkeling van bedrijfsapplicaties:\n\n * Volledige ondersteuning voor TypeScript\n * Rijk ecosysteem van externe componenten\n * Volwassen ontwikkeltoolchain\n * Bewezen stabiliteit in productieomgevingen\n\nBekijk de gedetailleerde documentatie voor de Vue2-versie\n\n\nVue3#\n\nGeschikt voor moderne webapplicaties:\n\n * Reactief systeem gebaseerd op Proxy\n * Ondersteuning voor Composition API\n * Betere runtimeprestaties\n * Kleinere bundelgrootte\n\nBekijk de gedetailleerde documentatie voor de Vue3-versie\n\n\nPreact+HTM#\n\nGeschikt voor projecten die streven naar lichtgewicht en hoge prestaties:\n\n * Zeer kleine runtimegrootte (3KB)\n * Native JavaScript-templatesyntaxis\n * Compatibel met React API\n * Uitstekende prestaties\n\nBekijk de gedetailleerde documentatie voor de Preact+HTM-versie\n\n\nAI-ondersteunde ontwikkeling#\n\nHet Gez Framework biedt AI-ondersteunde ontwikkelingsmogelijkheden die de\nontwikkelingssnelheid aanzienlijk kunnen verhogen:\n\n 1. Kies de juiste frameworkversiedocumentatie\n 2. Geef de documentatie-inhoud door aan de AI-assistent\n 3. De AI genereert automatisch het projectskelet en configuratiebestanden\n\nTip\n\nAI-ondersteunde ontwikkeling versnelt niet alleen de projectinitialisatie, maar\nzorgt er ook voor dat de projectstructuur voldoet aan de beste praktijken.","routePath":"/nl/guide/start/getting-started","lang":"nl","toc":[{"text":"Projectinitialisatie","id":"projectinitialisatie","depth":2,"charIndex":3},{"text":"Frameworkversiekeuze","id":"frameworkversiekeuze","depth":2,"charIndex":107},{"text":"HTML","id":"html","depth":3,"charIndex":309},{"text":"Vue2","id":"vue2","depth":3,"charIndex":677},{"text":"Vue3","id":"vue3","depth":3,"charIndex":965},{"text":"Preact+HTM","id":"preacthtm","depth":3,"charIndex":1203},{"text":"AI-ondersteunde ontwikkeling","id":"ai-ondersteunde-ontwikkeling","depth":2,"charIndex":1486}],"domain":"","frontmatter":{"titleSuffix":"Snelstartgids voor Gez Framework","description":"Snelstartgids voor het Gez Framework, waarmee je vanaf nul een project kunt opzetten, inclusief projectinitialisatie, frameworkversiekeuze en AI-ondersteunde ontwikkeling.","head":[["meta",{"name":"keywords","content":"Gez Framework, Snel starten, Projectinitialisatie, Vue-ontwikkeling, HTML-ontwikkeling, AI-ondersteuning"}]]},"version":""},{"id":223,"title":"Introductie","content":"#\n\n\nProjectachtergrond#\n\nGez is een modern microfrontend-framework gebaseerd op ECMAScript Modules (ESM),\ngericht op het bouwen van hoogwaardige, schaalbare server-side rendering (SSR)\napplicaties. Als derde generatie product van het Genesis-project, blijft Gez\ninnoveren in de technologische evolutie:\n\n * v1.0: Implementatie van on-demand laden van externe componenten via\n   HTTP-verzoeken\n * v2.0: Applicatie-integratie via Webpack Module Federation\n * v3.0: Herontwerp van het module link systeem op basis van native browser-ESM\n\n\nTechnologische achtergrond#\n\nIn de ontwikkeling van microfrontend-architectuur hebben traditionele\noplossingen voornamelijk de volgende beperkingen:\n\n\nUitdagingen van bestaande oplossingen#\n\n * Prestatieproblemen: Runtime dependency injection en JavaScript\n   sandbox-proxies veroorzaken aanzienlijke prestatieoverhead\n * Isolatiemechanisme: Zelfontwikkelde sandbox-omgevingen kunnen niet tippen aan\n   de native module-isolatie van browsers\n * Bouwcomplexiteit: Aanpassingen aan bouwhulpmiddelen voor het delen van\n   afhankelijkheden verhogen de onderhoudskosten van projecten\n * Afwijking van standaarden: Speciale implementatiestrategieën en\n   runtime-verwerkingsmechanismen wijken af van moderne\n   webontwikkelingsstandaarden\n * Ecosysteembeperkingen: Framework-koppeling en aangepaste API's beperken de\n   keuze van technologische stacks\n\n\nTechnologische innovatie#\n\nGez biedt een nieuwe oplossing op basis van moderne webstandaarden:\n\n * Native modulesysteem: Gebruik van native browser-ESM en Import Maps voor\n   dependency management, met snellere parsing en uitvoering\n * Standaard isolatiemechanisme: Betrouwbare applicatie-isolatie op basis van\n   ECMAScript module scope\n * Open technologische stack: Naadloze integratie met elk modern\n   frontend-framework\n * Geoptimaliseerde ontwikkelingservaring: Intuïtieve ontwikkelingsmodellen en\n   volledige debug-mogelijkheden\n * Extreme prestatieoptimalisatie: Nul runtime-overhead door native\n   mogelijkheden, gecombineerd met intelligente caching-strategieën\n\nTIP\n\nGez richt zich op het creëren van hoogwaardige, eenvoudig uitbreidbare\nmicrofrontend-infrastructuur, met name geschikt voor grootschalige server-side\nrendering toepassingen.\n\n\nTechnische specificaties#\n\n\nOmgevingsafhankelijkheden#\n\nRaadpleeg het document Omgevingsvereisten voor gedetailleerde browser- en\nNode.js-omgevingsvereisten.\n\n\nKern technologische stack#\n\n * Dependency management: Gebruik van Import Maps voor module mapping, met\n   es-module-shims voor compatibiliteitsondersteuning\n * Bouwsysteem: Gebaseerd op Rspack's module-import voor het verwerken van\n   externe afhankelijkheden\n * Ontwikkelingsgereedschapsketen: Ondersteuning voor ESM hot reload en native\n   TypeScript-uitvoering\n\n\nFramework positionering#\n\nGez verschilt van Next.js of Nuxt.js, en richt zich op het bieden van\nmicrofrontend-infrastructuur:\n\n * Module link systeem: Efficiënte en betrouwbare module import/export\n * Server-side rendering: Flexibele SSR-implementatiemechanismen\n * Type systeemondersteuning: Integratie van volledige TypeScript-type\n   definities\n * Framework neutraliteit: Ondersteuning voor integratie met mainstream\n   frontend-frameworks\n\n\nArchitectuurontwerp#\n\n\nGecentraliseerd dependency management#\n\n * Uniforme dependency bron: Gecentraliseerd beheer van derde partij\n   afhankelijkheden\n * Automatische distributie: Globale automatische synchronisatie van dependency\n   updates\n * Versieconsistentie: Nauwkeurige versiebeheer van afhankelijkheden\n\n\nModulair ontwerp#\n\n * Scheiding van verantwoordelijkheden: Ontkoppeling van bedrijfslogica en\n   infrastructuur\n * Pluginmechanisme: Flexibele combinatie en vervanging van modules\n * Standaard interfaces: Gestandaardiseerde communicatieprotocollen tussen\n   modules\n\n\nPrestatieoptimalisatie#\n\n * Zero overhead principe: Maximalisatie van native browser-mogelijkheden\n * Intelligente caching: Precisie caching-strategieën op basis van content\n   hashing\n * On-demand laden: Verfijnde code-splitsing en dependency management\n\n\nProjectvolwassenheid#\n\nGez heeft door bijna 5 jaar van iteratieve evolutie (v1.0 tot v3.0) volledige\nvalidatie in enterprise-omgevingen ondergaan. Momenteel ondersteunt het\ntientallen bedrijfsprojecten die stabiel draaien, en blijft het technologische\nstack-modernisering stimuleren. De stabiliteit, betrouwbaarheid en\nprestatievoordelen van het framework zijn in de praktijk grondig getest, en\nbieden een betrouwbare technologische basis voor grootschalige\napplicatieontwikkeling.","routePath":"/nl/guide/start/introduction","lang":"nl","toc":[{"text":"Projectachtergrond","id":"projectachtergrond","depth":2,"charIndex":3},{"text":"Technologische achtergrond","id":"technologische-achtergrond","depth":2,"charIndex":535},{"text":"Uitdagingen van bestaande oplossingen","id":"uitdagingen-van-bestaande-oplossingen","depth":3,"charIndex":686},{"text":"Technologische innovatie","id":"technologische-innovatie","depth":3,"charIndex":1383},{"text":"Technische specificaties","id":"technische-specificaties","depth":2,"charIndex":2238},{"text":"Omgevingsafhankelijkheden","id":"omgevingsafhankelijkheden","depth":3,"charIndex":2266},{"text":"Kern technologische stack","id":"kern-technologische-stack","depth":3,"charIndex":2398},{"text":"Framework positionering","id":"framework-positionering","depth":2,"charIndex":2764},{"text":"Architectuurontwerp","id":"architectuurontwerp","depth":2,"charIndex":3209},{"text":"Gecentraliseerd dependency management","id":"gecentraliseerd-dependency-management","depth":3,"charIndex":3232},{"text":"Modulair ontwerp","id":"modulair-ontwerp","depth":3,"charIndex":3523},{"text":"Prestatieoptimalisatie","id":"prestatieoptimalisatie","depth":3,"charIndex":3791},{"text":"Projectvolwassenheid","id":"projectvolwassenheid","depth":2,"charIndex":4048}],"domain":"","frontmatter":{"titleSuffix":"Overzicht van Gez Framework en Technologische Innovatie","description":"Verdiep je in de projectachtergrond, technologische evolutie en kernvoordelen van het Gez microfrontend-framework, en ontdek moderne server-side rendering (SSR) oplossingen op basis van ESM.","head":[["meta",{"property":"keywords","content":"Gez, microfrontend, ESM, server-side rendering, SSR, technologische innovatie, module federation"}]]},"version":""}]